
project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  000031a8  0000323c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001b  0080023c  0080023c  00003418  2**0
                  ALLOC
  3 .stab         00004db8  00000000  00000000  00003418  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003909  00000000  00000000  000081d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000bad9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000bc59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000be2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000de3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000ef9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000ffa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00010140  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  000103fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010d0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 83 06 	jmp	0xd06	; 0xd06 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ea       	ldi	r30, 0xA8	; 168
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 33       	cpi	r26, 0x3C	; 60
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac e3       	ldi	r26, 0x3C	; 60
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 35       	cpi	r26, 0x57	; 87
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2e 18 	call	0x305c	; 0x305c <main>
      8a:	0c 94 d2 18 	jmp	0x31a4	; 0x31a4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 18 	jmp	0x310c	; 0x310c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 18 	jmp	0x310c	; 0x310c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 76 18 	jmp	0x30ec	; 0x30ec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 8f 18 	jmp	0x311e	; 0x311e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 7a 18 	jmp	0x30f4	; 0x30f4 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 96 18 	jmp	0x312c	; 0x312c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e3 57       	subi	r30, 0x73	; 115
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <__vector_9>:

/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBackPtr)(void) = NULL_PTR;

ISR (TIMER0_OVF_vect)
{
     ca0:	1f 92       	push	r1
     ca2:	0f 92       	push	r0
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	0f 92       	push	r0
     ca8:	11 24       	eor	r1, r1
     caa:	2f 93       	push	r18
     cac:	3f 93       	push	r19
     cae:	4f 93       	push	r20
     cb0:	5f 93       	push	r21
     cb2:	6f 93       	push	r22
     cb4:	7f 93       	push	r23
     cb6:	8f 93       	push	r24
     cb8:	9f 93       	push	r25
     cba:	af 93       	push	r26
     cbc:	bf 93       	push	r27
     cbe:	ef 93       	push	r30
     cc0:	ff 93       	push	r31
     cc2:	df 93       	push	r29
     cc4:	cf 93       	push	r28
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     cca:	80 91 3c 02 	lds	r24, 0x023C
     cce:	90 91 3d 02 	lds	r25, 0x023D
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	29 f0       	breq	.+10     	; 0xce0 <__vector_9+0x40>
		{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     cd6:	e0 91 3c 02 	lds	r30, 0x023C
     cda:	f0 91 3d 02 	lds	r31, 0x023D
     cde:	09 95       	icall
		}
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	ff 91       	pop	r31
     ce6:	ef 91       	pop	r30
     ce8:	bf 91       	pop	r27
     cea:	af 91       	pop	r26
     cec:	9f 91       	pop	r25
     cee:	8f 91       	pop	r24
     cf0:	7f 91       	pop	r23
     cf2:	6f 91       	pop	r22
     cf4:	5f 91       	pop	r21
     cf6:	4f 91       	pop	r20
     cf8:	3f 91       	pop	r19
     cfa:	2f 91       	pop	r18
     cfc:	0f 90       	pop	r0
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	0f 90       	pop	r0
     d02:	1f 90       	pop	r1
     d04:	18 95       	reti

00000d06 <__vector_19>:

ISR (TIMER0_COMP_vect)
{
     d06:	1f 92       	push	r1
     d08:	0f 92       	push	r0
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	0f 92       	push	r0
     d0e:	11 24       	eor	r1, r1
     d10:	2f 93       	push	r18
     d12:	3f 93       	push	r19
     d14:	4f 93       	push	r20
     d16:	5f 93       	push	r21
     d18:	6f 93       	push	r22
     d1a:	7f 93       	push	r23
     d1c:	8f 93       	push	r24
     d1e:	9f 93       	push	r25
     d20:	af 93       	push	r26
     d22:	bf 93       	push	r27
     d24:	ef 93       	push	r30
     d26:	ff 93       	push	r31
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
     d30:	80 91 3c 02 	lds	r24, 0x023C
     d34:	90 91 3d 02 	lds	r25, 0x023D
     d38:	00 97       	sbiw	r24, 0x00	; 0
     d3a:	29 f0       	breq	.+10     	; 0xd46 <__vector_19+0x40>
		{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
     d3c:	e0 91 3c 02 	lds	r30, 0x023C
     d40:	f0 91 3d 02 	lds	r31, 0x023D
     d44:	09 95       	icall
		}
}
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	6f 91       	pop	r22
     d5a:	5f 91       	pop	r21
     d5c:	4f 91       	pop	r20
     d5e:	3f 91       	pop	r19
     d60:	2f 91       	pop	r18
     d62:	0f 90       	pop	r0
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	0f 90       	pop	r0
     d68:	1f 90       	pop	r1
     d6a:	18 95       	reti

00000d6c <Timer0_init>:

void Timer0_init(const Timer0_ConfigType *Config_ptr)
{
     d6c:	df 93       	push	r29
     d6e:	cf 93       	push	r28
     d70:	00 d0       	rcall	.+0      	; 0xd72 <Timer0_init+0x6>
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	9a 83       	std	Y+2, r25	; 0x02
     d78:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_ptr->initialValue;
     d7a:	a2 e5       	ldi	r26, 0x52	; 82
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e9 81       	ldd	r30, Y+1	; 0x01
     d80:	fa 81       	ldd	r31, Y+2	; 0x02
     d82:	82 81       	ldd	r24, Z+2	; 0x02
     d84:	8c 93       	st	X, r24
	if (Config_ptr->mode == NORMAL_MODE)
     d86:	e9 81       	ldd	r30, Y+1	; 0x01
     d88:	fa 81       	ldd	r31, Y+2	; 0x02
     d8a:	80 81       	ld	r24, Z
     d8c:	88 23       	and	r24, r24
     d8e:	d9 f4       	brne	.+54     	; 0xdc6 <Timer0_init+0x5a>
	{
		TCCR0|=(1<<FOC0);
     d90:	a3 e5       	ldi	r26, 0x53	; 83
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e3 e5       	ldi	r30, 0x53	; 83
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	80 68       	ori	r24, 0x80	; 128
     d9c:	8c 93       	st	X, r24
		TIMSK|=(1<<TOIE0);
     d9e:	a9 e5       	ldi	r26, 0x59	; 89
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e9 e5       	ldi	r30, 0x59	; 89
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	81 60       	ori	r24, 0x01	; 1
     daa:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->clock);
     dac:	a3 e5       	ldi	r26, 0x53	; 83
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	e3 e5       	ldi	r30, 0x53	; 83
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	98 2f       	mov	r25, r24
     db8:	98 7f       	andi	r25, 0xF8	; 248
     dba:	e9 81       	ldd	r30, Y+1	; 0x01
     dbc:	fa 81       	ldd	r31, Y+2	; 0x02
     dbe:	81 81       	ldd	r24, Z+1	; 0x01
     dc0:	89 2b       	or	r24, r25
     dc2:	8c 93       	st	X, r24
     dc4:	2c c0       	rjmp	.+88     	; 0xe1e <Timer0_init+0xb2>
	}
	else if (Config_ptr->mode == COMPARE_MODE)
     dc6:	e9 81       	ldd	r30, Y+1	; 0x01
     dc8:	fa 81       	ldd	r31, Y+2	; 0x02
     dca:	80 81       	ld	r24, Z
     dcc:	82 30       	cpi	r24, 0x02	; 2
     dce:	39 f5       	brne	.+78     	; 0xe1e <Timer0_init+0xb2>
	{
		TCCR0 |= (1 << FOC0);
     dd0:	a3 e5       	ldi	r26, 0x53	; 83
     dd2:	b0 e0       	ldi	r27, 0x00	; 0
     dd4:	e3 e5       	ldi	r30, 0x53	; 83
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	80 68       	ori	r24, 0x80	; 128
     ddc:	8c 93       	st	X, r24
		TCCR0 |= (1 << WGM01);
     dde:	a3 e5       	ldi	r26, 0x53	; 83
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e3 e5       	ldi	r30, 0x53	; 83
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	88 60       	ori	r24, 0x08	; 8
     dea:	8c 93       	st	X, r24
		TIMSK |= (1 << OCIE0);
     dec:	a9 e5       	ldi	r26, 0x59	; 89
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e9 e5       	ldi	r30, 0x59	; 89
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	82 60       	ori	r24, 0x02	; 2
     df8:	8c 93       	st	X, r24
		OCR0 = Config_ptr->compareValue;
     dfa:	ac e5       	ldi	r26, 0x5C	; 92
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	e9 81       	ldd	r30, Y+1	; 0x01
     e00:	fa 81       	ldd	r31, Y+2	; 0x02
     e02:	83 81       	ldd	r24, Z+3	; 0x03
     e04:	8c 93       	st	X, r24
		TCCR0 = (TCCR0 & 0xF8) | (Config_ptr->clock);
     e06:	a3 e5       	ldi	r26, 0x53	; 83
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	e3 e5       	ldi	r30, 0x53	; 83
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	98 2f       	mov	r25, r24
     e12:	98 7f       	andi	r25, 0xF8	; 248
     e14:	e9 81       	ldd	r30, Y+1	; 0x01
     e16:	fa 81       	ldd	r31, Y+2	; 0x02
     e18:	81 81       	ldd	r24, Z+1	; 0x01
     e1a:	89 2b       	or	r24, r25
     e1c:	8c 93       	st	X, r24
	}
}
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <Timer0_setCallBack>:

void Timer0_setCallBack( void(*a_ptr)(void) )
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	00 d0       	rcall	.+0      	; 0xe2e <Timer0_setCallBack+0x6>
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	9a 83       	std	Y+2, r25	; 0x02
     e34:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
     e38:	9a 81       	ldd	r25, Y+2	; 0x02
     e3a:	90 93 3d 02 	sts	0x023D, r25
     e3e:	80 93 3c 02 	sts	0x023C, r24
}
     e42:	0f 90       	pop	r0
     e44:	0f 90       	pop	r0
     e46:	cf 91       	pop	r28
     e48:	df 91       	pop	r29
     e4a:	08 95       	ret

00000e4c <Timer0_DeInit>:

void Timer0_DeInit(void)
{
     e4c:	df 93       	push	r29
     e4e:	cf 93       	push	r28
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
     e54:	e3 e5       	ldi	r30, 0x53	; 83
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1
	TIMSK=0;
     e5a:	e9 e5       	ldi	r30, 0x59	; 89
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1
//	g_callBackPtr=NULL_PTR;
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <EnableInterrupt>:

void EnableInterrupt(void){}
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	08 95       	ret

00000e74 <DisableInterrupt>:


void DisableInterrupt(void){}
     e74:	df 93       	push	r29
     e76:	cf 93       	push	r28
     e78:	cd b7       	in	r28, 0x3d	; 61
     e7a:	de b7       	in	r29, 0x3e	; 62
     e7c:	cf 91       	pop	r28
     e7e:	df 91       	pop	r29
     e80:	08 95       	ret

00000e82 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	64 e0       	ldi	r22, 0x04	; 4
     e8e:	41 e0       	ldi	r20, 0x01	; 1
     e90:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	65 e0       	ldi	r22, 0x05	; 5
     e98:	41 e0       	ldi	r20, 0x01	; 1
     e9a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	66 e0       	ldi	r22, 0x06	; 6
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	67 e0       	ldi	r22, 0x07	; 7
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 0 Sample Data with the raising edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR)| (1<<CPHA);
     eb2:	ed e2       	ldi	r30, 0x2D	; 45
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	84 e5       	ldi	r24, 0x54	; 84
     eb8:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
     eba:	ae e2       	ldi	r26, 0x2E	; 46
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	ee e2       	ldi	r30, 0x2E	; 46
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8e 7f       	andi	r24, 0xFE	; 254
     ec6:	8c 93       	st	X, r24
}
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	64 e0       	ldi	r22, 0x04	; 4
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	65 e0       	ldi	r22, 0x05	; 5
     ee4:	40 e0       	ldi	r20, 0x00	; 0
     ee6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	66 e0       	ldi	r22, 0x06	; 6
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	67 e0       	ldi	r22, 0x07	; 7
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
     efe:	ed e2       	ldi	r30, 0x2D	; 45
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 e4       	ldi	r24, 0x40	; 64
     f04:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
     f06:	ae e2       	ldi	r26, 0x2E	; 46
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ee e2       	ldi	r30, 0x2E	; 46
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	8e 7f       	andi	r24, 0xFE	; 254
     f12:	8c 93       	st	X, r24
}
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
     f1a:	df 93       	push	r29
     f1c:	cf 93       	push	r28
     f1e:	0f 92       	push	r0
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
     f26:	ef e2       	ldi	r30, 0x2F	; 47
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
     f2e:	ee e2       	ldi	r30, 0x2E	; 46
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	88 23       	and	r24, r24
     f36:	dc f7       	brge	.-10     	; 0xf2e <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
     f38:	ef e2       	ldi	r30, 0x2F	; 47
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
}
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <SPI_sendString+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <SPI_sendString+0x8>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
     f56:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
     f58:	19 82       	std	Y+1, r1	; 0x01
     f5a:	0f c0       	rjmp	.+30     	; 0xf7a <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	9c 81       	ldd	r25, Y+4	; 0x04
     f66:	fc 01       	movw	r30, r24
     f68:	e2 0f       	add	r30, r18
     f6a:	f3 1f       	adc	r31, r19
     f6c:	80 81       	ld	r24, Z
     f6e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
     f72:	89 83       	std	Y+1, r24	; 0x01
		i++;
     f74:	8a 81       	ldd	r24, Y+2	; 0x02
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	fc 01       	movw	r30, r24
     f86:	e2 0f       	add	r30, r18
     f88:	f3 1f       	adc	r31, r19
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	31 f7       	brne	.-52     	; 0xf5c <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	cf 91       	pop	r28
     f9a:	df 91       	pop	r29
     f9c:	08 95       	ret

00000f9e <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	df 93       	push	r29
     fa4:	cf 93       	push	r28
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <SPI_receiveString+0xa>
     fa8:	0f 92       	push	r0
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	9b 83       	std	Y+3, r25	; 0x03
     fb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     fb2:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	8c 01       	movw	r16, r24
     fc0:	02 0f       	add	r16, r18
     fc2:	13 1f       	adc	r17, r19
     fc4:	8f ef       	ldi	r24, 0xFF	; 255
     fc6:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
     fca:	f8 01       	movw	r30, r16
     fcc:	80 83       	st	Z, r24
     fce:	10 c0       	rjmp	.+32     	; 0xff0 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	8f 5f       	subi	r24, 0xFF	; 255
     fd4:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	8c 01       	movw	r16, r24
     fe2:	02 0f       	add	r16, r18
     fe4:	13 1f       	adc	r17, r19
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
     fec:	f8 01       	movw	r30, r16
     fee:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	9b 81       	ldd	r25, Y+3	; 0x03
     ffa:	fc 01       	movw	r30, r24
     ffc:	e2 0f       	add	r30, r18
     ffe:	f3 1f       	adc	r31, r19
    1000:	80 81       	ld	r24, Z
    1002:	83 32       	cpi	r24, 0x23	; 35
    1004:	29 f7       	brne	.-54     	; 0xfd0 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	28 2f       	mov	r18, r24
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	9b 81       	ldd	r25, Y+3	; 0x03
    1010:	fc 01       	movw	r30, r24
    1012:	e2 0f       	add	r30, r18
    1014:	f3 1f       	adc	r31, r19
    1016:	10 82       	st	Z, r1
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <PWM_Timer2_Start>:
#include "pwm.h"


void PWM_Timer2_Start(uint8 duty_cycle){
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
	 * FOC0=0 PWM MODE
	 * WGM00 & WGM01 =1 FAST PWM
	 * COM01 =1 NON INVERTING MODE
	 * CS01=1 PRESCALER 8
	 * */
	TCCR2=(1<<WGM21)|(1<<WGM20)|(1<<COM21)|(1<<CS21);
    1034:	e5 e4       	ldi	r30, 0x45	; 69
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8a e6       	ldi	r24, 0x6A	; 106
    103a:	80 83       	st	Z, r24
	OCR2=duty_cycle;
    103c:	e3 e4       	ldi	r30, 0x43	; 67
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	80 83       	st	Z, r24

}
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <GPIO_Init>:
 * Description :
 * configure every pin in the gpio.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_Init(const GPIO_ConfigType GPIO_ConfigPtr[])
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	00 d0       	rcall	.+0      	; 0x1052 <GPIO_Init+0x6>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	9b 83       	std	Y+3, r25	; 0x03
    105a:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    105c:	19 82       	std	Y+1, r1	; 0x01
    105e:	ca c0       	rjmp	.+404    	; 0x11f4 <GPIO_Init+0x1a8>
    for (; i < TOTAL_PINS_NUM; ++i)
    {
	if(((GPIO_ConfigPtr[i].pin_num) >= NUM_OF_PINS_PER_PORT) || ((GPIO_ConfigPtr[i].port_num )>= NUM_OF_PORTS) )
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	28 2f       	mov	r18, r24
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	c9 01       	movw	r24, r18
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	28 0f       	add	r18, r24
    1072:	39 1f       	adc	r19, r25
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	9b 81       	ldd	r25, Y+3	; 0x03
    1078:	fc 01       	movw	r30, r24
    107a:	e2 0f       	add	r30, r18
    107c:	f3 1f       	adc	r31, r19
    107e:	81 81       	ldd	r24, Z+1	; 0x01
    1080:	88 30       	cpi	r24, 0x08	; 8
    1082:	08 f0       	brcs	.+2      	; 0x1086 <GPIO_Init+0x3a>
    1084:	b4 c0       	rjmp	.+360    	; 0x11ee <GPIO_Init+0x1a2>
    1086:	89 81       	ldd	r24, Y+1	; 0x01
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	c9 01       	movw	r24, r18
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	28 0f       	add	r18, r24
    1098:	39 1f       	adc	r19, r25
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	9b 81       	ldd	r25, Y+3	; 0x03
    109e:	fc 01       	movw	r30, r24
    10a0:	e2 0f       	add	r30, r18
    10a2:	f3 1f       	adc	r31, r19
    10a4:	80 81       	ld	r24, Z
    10a6:	84 30       	cpi	r24, 0x04	; 4
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <GPIO_Init+0x60>
    10aa:	a1 c0       	rjmp	.+322    	; 0x11ee <GPIO_Init+0x1a2>
		/* Do Nothing */
	}
	else
	{

		GPIO_setupPinDirection(GPIO_ConfigPtr[i].port_num, GPIO_ConfigPtr[i].pin_num, GPIO_ConfigPtr[i].direction);
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	c9 01       	movw	r24, r18
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	28 0f       	add	r18, r24
    10be:	39 1f       	adc	r19, r25
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	fc 01       	movw	r30, r24
    10c6:	e2 0f       	add	r30, r18
    10c8:	f3 1f       	adc	r31, r19
    10ca:	50 81       	ld	r21, Z
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	c9 01       	movw	r24, r18
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	28 0f       	add	r18, r24
    10de:	39 1f       	adc	r19, r25
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	9b 81       	ldd	r25, Y+3	; 0x03
    10e4:	fc 01       	movw	r30, r24
    10e6:	e2 0f       	add	r30, r18
    10e8:	f3 1f       	adc	r31, r19
    10ea:	41 81       	ldd	r20, Z+1	; 0x01
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	c9 01       	movw	r24, r18
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	28 0f       	add	r18, r24
    10fe:	39 1f       	adc	r19, r25
    1100:	8a 81       	ldd	r24, Y+2	; 0x02
    1102:	9b 81       	ldd	r25, Y+3	; 0x03
    1104:	fc 01       	movw	r30, r24
    1106:	e2 0f       	add	r30, r18
    1108:	f3 1f       	adc	r31, r19
    110a:	92 81       	ldd	r25, Z+2	; 0x02
    110c:	85 2f       	mov	r24, r21
    110e:	64 2f       	mov	r22, r20
    1110:	49 2f       	mov	r20, r25
    1112:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>

		GPIO_writePin(GPIO_ConfigPtr[i].port_num, GPIO_ConfigPtr[i].pin_num, GPIO_ConfigPtr[i].initial_value);
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	c9 01       	movw	r24, r18
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	28 0f       	add	r18, r24
    1128:	39 1f       	adc	r19, r25
    112a:	8a 81       	ldd	r24, Y+2	; 0x02
    112c:	9b 81       	ldd	r25, Y+3	; 0x03
    112e:	fc 01       	movw	r30, r24
    1130:	e2 0f       	add	r30, r18
    1132:	f3 1f       	adc	r31, r19
    1134:	50 81       	ld	r21, Z
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	c9 01       	movw	r24, r18
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	28 0f       	add	r18, r24
    1148:	39 1f       	adc	r19, r25
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	41 81       	ldd	r20, Z+1	; 0x01
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	c9 01       	movw	r24, r18
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	28 0f       	add	r18, r24
    1168:	39 1f       	adc	r19, r25
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	9b 81       	ldd	r25, Y+3	; 0x03
    116e:	fc 01       	movw	r30, r24
    1170:	e2 0f       	add	r30, r18
    1172:	f3 1f       	adc	r31, r19
    1174:	94 81       	ldd	r25, Z+4	; 0x04
    1176:	85 2f       	mov	r24, r21
    1178:	64 2f       	mov	r22, r20
    117a:	49 2f       	mov	r20, r25
    117c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>


		if(GPIO_ConfigPtr[i].resistor == GPIO_PULL_UP)
    1180:	89 81       	ldd	r24, Y+1	; 0x01
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	c9 01       	movw	r24, r18
    1188:	88 0f       	add	r24, r24
    118a:	99 1f       	adc	r25, r25
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	28 0f       	add	r18, r24
    1192:	39 1f       	adc	r19, r25
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	fc 01       	movw	r30, r24
    119a:	e2 0f       	add	r30, r18
    119c:	f3 1f       	adc	r31, r19
    119e:	83 81       	ldd	r24, Z+3	; 0x03
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	29 f5       	brne	.+74     	; 0x11ee <GPIO_Init+0x1a2>
		{
			GPIO_writePin(GPIO_ConfigPtr[i].port_num, GPIO_ConfigPtr[i].pin_num,LOGIC_HIGH);
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	c9 01       	movw	r24, r18
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	28 0f       	add	r18, r24
    11b6:	39 1f       	adc	r19, r25
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	9b 81       	ldd	r25, Y+3	; 0x03
    11bc:	fc 01       	movw	r30, r24
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	40 81       	ld	r20, Z
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	c9 01       	movw	r24, r18
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	28 0f       	add	r18, r24
    11d6:	39 1f       	adc	r19, r25
    11d8:	8a 81       	ldd	r24, Y+2	; 0x02
    11da:	9b 81       	ldd	r25, Y+3	; 0x03
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	91 81       	ldd	r25, Z+1	; 0x01
    11e4:	84 2f       	mov	r24, r20
    11e6:	69 2f       	mov	r22, r25
    11e8:	41 e0       	ldi	r20, 0x01	; 1
    11ea:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_Init(const GPIO_ConfigType GPIO_ConfigPtr[])
{
    uint8 i = 0;
    for (; i < TOTAL_PINS_NUM; ++i)
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	89 83       	std	Y+1, r24	; 0x01
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	80 32       	cpi	r24, 0x20	; 32
    11f8:	08 f4       	brcc	.+2      	; 0x11fc <GPIO_Init+0x1b0>
    11fa:	32 cf       	rjmp	.-412    	; 0x1060 <GPIO_Init+0x14>
		{

		}
	}
}
}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <GPIO_ChannelGroupWrite>:
/*
 *  Description :
 *  write in a group of of pin
 */
void GPIO_ChannelGroupWrite(ChannelGroupType* ChannelID ,uint8 dataPtr[]){
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	28 97       	sbiw	r28, 0x08	; 8
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	9e 83       	std	Y+6, r25	; 0x06
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	78 87       	std	Y+8, r23	; 0x08
    1222:	6f 83       	std	Y+7, r22	; 0x07
    uint8 i = 0;
    1224:	1c 82       	std	Y+4, r1	; 0x04
    uint8 id=0;
    1226:	1b 82       	std	Y+3, r1	; 0x03
    uint8 port_num=0;
    1228:	1a 82       	std	Y+2, r1	; 0x02
    uint8 pin_num=0;
    122a:	19 82       	std	Y+1, r1	; 0x01
    122c:	40 c0       	rjmp	.+128    	; 0x12ae <GPIO_ChannelGroupWrite+0xa6>
	for(; i < ChannelID->no_of_channels; ++i)
	{
	    id= ChannelID->group_ids[i];
    122e:	8c 81       	ldd	r24, Y+4	; 0x04
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	82 0f       	add	r24, r18
    123a:	93 1f       	adc	r25, r19
    123c:	fc 01       	movw	r30, r24
    123e:	31 96       	adiw	r30, 0x01	; 1
    1240:	80 81       	ld	r24, Z
    1242:	8b 83       	std	Y+3, r24	; 0x03
	    port_num = GPIO_ConfigPin[id].port_num;
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	c9 01       	movw	r24, r18
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	82 0f       	add	r24, r18
    1256:	93 1f       	adc	r25, r19
    1258:	fc 01       	movw	r30, r24
    125a:	ef 56       	subi	r30, 0x6F	; 111
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	80 81       	ld	r24, Z
    1260:	8a 83       	std	Y+2, r24	; 0x02
	    pin_num=GPIO_ConfigPin[id].pin_num;
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	c9 01       	movw	r24, r18
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	82 0f       	add	r24, r18
    1274:	93 1f       	adc	r25, r19
    1276:	fc 01       	movw	r30, r24
    1278:	ee 56       	subi	r30, 0x6E	; 110
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	80 81       	ld	r24, Z
    127e:	89 83       	std	Y+1, r24	; 0x01

		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS) )
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	88 30       	cpi	r24, 0x08	; 8
    1284:	88 f4       	brcc	.+34     	; 0x12a8 <GPIO_ChannelGroupWrite+0xa0>
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	70 f4       	brcc	.+28     	; 0x12a8 <GPIO_ChannelGroupWrite+0xa0>
		}
		else
		{


			GPIO_writePin(port_num, pin_num,dataPtr[i]);
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	8f 81       	ldd	r24, Y+7	; 0x07
    1294:	98 85       	ldd	r25, Y+8	; 0x08
    1296:	fc 01       	movw	r30, r24
    1298:	e2 0f       	add	r30, r18
    129a:	f3 1f       	adc	r31, r19
    129c:	90 81       	ld	r25, Z
    129e:	8a 81       	ldd	r24, Y+2	; 0x02
    12a0:	69 81       	ldd	r22, Y+1	; 0x01
    12a2:	49 2f       	mov	r20, r25
    12a4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
void GPIO_ChannelGroupWrite(ChannelGroupType* ChannelID ,uint8 dataPtr[]){
    uint8 i = 0;
    uint8 id=0;
    uint8 port_num=0;
    uint8 pin_num=0;
	for(; i < ChannelID->no_of_channels; ++i)
    12a8:	8c 81       	ldd	r24, Y+4	; 0x04
    12aa:	8f 5f       	subi	r24, 0xFF	; 255
    12ac:	8c 83       	std	Y+4, r24	; 0x04
    12ae:	ed 81       	ldd	r30, Y+5	; 0x05
    12b0:	fe 81       	ldd	r31, Y+6	; 0x06
    12b2:	90 81       	ld	r25, Z
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	89 17       	cp	r24, r25
    12b8:	08 f4       	brcc	.+2      	; 0x12bc <GPIO_ChannelGroupWrite+0xb4>
    12ba:	b9 cf       	rjmp	.-142    	; 0x122e <GPIO_ChannelGroupWrite+0x26>

			GPIO_writePin(port_num, pin_num,dataPtr[i]);

		}
	}
}
    12bc:	28 96       	adiw	r28, 0x08	; 8
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	f8 94       	cli
    12c2:	de bf       	out	0x3e, r29	; 62
    12c4:	0f be       	out	0x3f, r0	; 63
    12c6:	cd bf       	out	0x3d, r28	; 61
    12c8:	cf 91       	pop	r28
    12ca:	df 91       	pop	r29
    12cc:	08 95       	ret

000012ce <GPIO_ChannelGroupRead>:
/*
 *  Description :
 *  read in a group of of pin
 */
void GPIO_ChannelGroupRead(ChannelGroupType* ChannelID,uint8 dataPtr[]){
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	a4 97       	sbiw	r28, 0x24	; 36
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	9a a3       	std	Y+34, r25	; 0x22
    12e8:	89 a3       	std	Y+33, r24	; 0x21
    12ea:	7c a3       	std	Y+36, r23	; 0x24
    12ec:	6b a3       	std	Y+35, r22	; 0x23
    uint8 i = 0;
    12ee:	18 a2       	std	Y+32, r1	; 0x20
    uint8 id=0;
    12f0:	1f 8e       	std	Y+31, r1	; 0x1f
    uint8 port_num=0;
    12f2:	1e 8e       	std	Y+30, r1	; 0x1e
    uint8 pin_num=0;
    12f4:	1d 8e       	std	Y+29, r1	; 0x1d
    12f6:	50 c1       	rjmp	.+672    	; 0x1598 <GPIO_ChannelGroupRead+0x2ca>
	for(; i < ChannelID->no_of_channels; ++i)
	{
		id= ChannelID->group_ids[i];
    12f8:	88 a1       	ldd	r24, Y+32	; 0x20
    12fa:	28 2f       	mov	r18, r24
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	89 a1       	ldd	r24, Y+33	; 0x21
    1300:	9a a1       	ldd	r25, Y+34	; 0x22
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	fc 01       	movw	r30, r24
    1308:	31 96       	adiw	r30, 0x01	; 1
    130a:	80 81       	ld	r24, Z
    130c:	8f 8f       	std	Y+31, r24	; 0x1f
		port_num = GPIO_ConfigPin[id].port_num;
    130e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	c9 01       	movw	r24, r18
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	fc 01       	movw	r30, r24
    1324:	ef 56       	subi	r30, 0x6F	; 111
    1326:	fe 4f       	sbci	r31, 0xFE	; 254
    1328:	80 81       	ld	r24, Z
    132a:	8e 8f       	std	Y+30, r24	; 0x1e
		pin_num=GPIO_ConfigPin[id].pin_num;
    132c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	c9 01       	movw	r24, r18
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	82 0f       	add	r24, r18
    133e:	93 1f       	adc	r25, r19
    1340:	fc 01       	movw	r30, r24
    1342:	ee 56       	subi	r30, 0x6E	; 110
    1344:	fe 4f       	sbci	r31, 0xFE	; 254
    1346:	80 81       	ld	r24, Z
    1348:	8d 8f       	std	Y+29, r24	; 0x1d

		if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS) )
    134a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    134c:	88 30       	cpi	r24, 0x08	; 8
    134e:	08 f0       	brcs	.+2      	; 0x1352 <GPIO_ChannelGroupRead+0x84>
    1350:	20 c1       	rjmp	.+576    	; 0x1592 <GPIO_ChannelGroupRead+0x2c4>
    1352:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1354:	84 30       	cpi	r24, 0x04	; 4
    1356:	08 f0       	brcs	.+2      	; 0x135a <GPIO_ChannelGroupRead+0x8c>
    1358:	1c c1       	rjmp	.+568    	; 0x1592 <GPIO_ChannelGroupRead+0x2c4>
			/* Do Nothing */
		}
		else
		{

			if(GPIO_readPin(port_num, pin_num) == LOGIC_HIGH)
    135a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    135c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    135e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	09 f0       	breq	.+2      	; 0x1368 <GPIO_ChannelGroupRead+0x9a>
    1366:	88 c0       	rjmp	.+272    	; 0x1478 <GPIO_ChannelGroupRead+0x1aa>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 ef       	ldi	r26, 0xF0	; 240
    136e:	b1 e4       	ldi	r27, 0x41	; 65
    1370:	89 8f       	std	Y+25, r24	; 0x19
    1372:	9a 8f       	std	Y+26, r25	; 0x1a
    1374:	ab 8f       	std	Y+27, r26	; 0x1b
    1376:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1378:	69 8d       	ldd	r22, Y+25	; 0x19
    137a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    137c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    137e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	4a e7       	ldi	r20, 0x7A	; 122
    1386:	53 e4       	ldi	r21, 0x43	; 67
    1388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	8d 8b       	std	Y+21, r24	; 0x15
    1392:	9e 8b       	std	Y+22, r25	; 0x16
    1394:	af 8b       	std	Y+23, r26	; 0x17
    1396:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1398:	6d 89       	ldd	r22, Y+21	; 0x15
    139a:	7e 89       	ldd	r23, Y+22	; 0x16
    139c:	8f 89       	ldd	r24, Y+23	; 0x17
    139e:	98 8d       	ldd	r25, Y+24	; 0x18
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e8       	ldi	r20, 0x80	; 128
    13a6:	5f e3       	ldi	r21, 0x3F	; 63
    13a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ac:	88 23       	and	r24, r24
    13ae:	2c f4       	brge	.+10     	; 0x13ba <GPIO_ChannelGroupRead+0xec>
		__ticks = 1;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
    13b6:	8b 8b       	std	Y+19, r24	; 0x13
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <GPIO_ChannelGroupRead+0x16a>
	else if (__tmp > 65535)
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	3f ef       	ldi	r19, 0xFF	; 255
    13c6:	4f e7       	ldi	r20, 0x7F	; 127
    13c8:	57 e4       	ldi	r21, 0x47	; 71
    13ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ce:	18 16       	cp	r1, r24
    13d0:	4c f5       	brge	.+82     	; 0x1424 <GPIO_ChannelGroupRead+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d2:	69 8d       	ldd	r22, Y+25	; 0x19
    13d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	40 e2       	ldi	r20, 0x20	; 32
    13e0:	51 e4       	ldi	r21, 0x41	; 65
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	bc 01       	movw	r22, r24
    13ec:	cd 01       	movw	r24, r26
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
    13fa:	0f c0       	rjmp	.+30     	; 0x141a <GPIO_ChannelGroupRead+0x14c>
    13fc:	89 e1       	ldi	r24, 0x19	; 25
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9a 8b       	std	Y+18, r25	; 0x12
    1402:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1404:	89 89       	ldd	r24, Y+17	; 0x11
    1406:	9a 89       	ldd	r25, Y+18	; 0x12
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <GPIO_ChannelGroupRead+0x13a>
    140c:	9a 8b       	std	Y+18, r25	; 0x12
    140e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1410:	8b 89       	ldd	r24, Y+19	; 0x13
    1412:	9c 89       	ldd	r25, Y+20	; 0x14
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	9c 8b       	std	Y+20, r25	; 0x14
    1418:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	8b 89       	ldd	r24, Y+19	; 0x13
    141c:	9c 89       	ldd	r25, Y+20	; 0x14
    141e:	00 97       	sbiw	r24, 0x00	; 0
    1420:	69 f7       	brne	.-38     	; 0x13fc <GPIO_ChannelGroupRead+0x12e>
    1422:	14 c0       	rjmp	.+40     	; 0x144c <GPIO_ChannelGroupRead+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1424:	6d 89       	ldd	r22, Y+21	; 0x15
    1426:	7e 89       	ldd	r23, Y+22	; 0x16
    1428:	8f 89       	ldd	r24, Y+23	; 0x17
    142a:	98 8d       	ldd	r25, Y+24	; 0x18
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9c 8b       	std	Y+20, r25	; 0x14
    1436:	8b 8b       	std	Y+19, r24	; 0x13
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	98 8b       	std	Y+16, r25	; 0x10
    143e:	8f 87       	std	Y+15, r24	; 0x0f
    1440:	8f 85       	ldd	r24, Y+15	; 0x0f
    1442:	98 89       	ldd	r25, Y+16	; 0x10
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	f1 f7       	brne	.-4      	; 0x1444 <GPIO_ChannelGroupRead+0x176>
    1448:	98 8b       	std	Y+16, r25	; 0x10
    144a:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms((double)30);
				if(GPIO_readPin(port_num, pin_num) == LOGIC_HIGH)
    144c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    144e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1450:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    1454:	81 30       	cpi	r24, 0x01	; 1
    1456:	09 f0       	breq	.+2      	; 0x145a <GPIO_ChannelGroupRead+0x18c>
    1458:	9c c0       	rjmp	.+312    	; 0x1592 <GPIO_ChannelGroupRead+0x2c4>
				{
				dataPtr[i] = GPIO_readPin(port_num, pin_num);
    145a:	88 a1       	ldd	r24, Y+32	; 0x20
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	8b a1       	ldd	r24, Y+35	; 0x23
    1462:	9c a1       	ldd	r25, Y+36	; 0x24
    1464:	8c 01       	movw	r16, r24
    1466:	02 0f       	add	r16, r18
    1468:	13 1f       	adc	r17, r19
    146a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    146c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    146e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    1472:	f8 01       	movw	r30, r16
    1474:	80 83       	st	Z, r24
    1476:	8d c0       	rjmp	.+282    	; 0x1592 <GPIO_ChannelGroupRead+0x2c4>
				}
			}
			else if(GPIO_readPin(port_num, pin_num) == LOGIC_LOW)
    1478:	8e 8d       	ldd	r24, Y+30	; 0x1e
    147a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    147c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    1480:	88 23       	and	r24, r24
    1482:	09 f0       	breq	.+2      	; 0x1486 <GPIO_ChannelGroupRead+0x1b8>
    1484:	86 c0       	rjmp	.+268    	; 0x1592 <GPIO_ChannelGroupRead+0x2c4>
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	a0 ef       	ldi	r26, 0xF0	; 240
    148c:	b1 e4       	ldi	r27, 0x41	; 65
    148e:	8b 87       	std	Y+11, r24	; 0x0b
    1490:	9c 87       	std	Y+12, r25	; 0x0c
    1492:	ad 87       	std	Y+13, r26	; 0x0d
    1494:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1496:	6b 85       	ldd	r22, Y+11	; 0x0b
    1498:	7c 85       	ldd	r23, Y+12	; 0x0c
    149a:	8d 85       	ldd	r24, Y+13	; 0x0d
    149c:	9e 85       	ldd	r25, Y+14	; 0x0e
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	4a e7       	ldi	r20, 0x7A	; 122
    14a4:	53 e4       	ldi	r21, 0x43	; 67
    14a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14aa:	dc 01       	movw	r26, r24
    14ac:	cb 01       	movw	r24, r22
    14ae:	8f 83       	std	Y+7, r24	; 0x07
    14b0:	98 87       	std	Y+8, r25	; 0x08
    14b2:	a9 87       	std	Y+9, r26	; 0x09
    14b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14b6:	6f 81       	ldd	r22, Y+7	; 0x07
    14b8:	78 85       	ldd	r23, Y+8	; 0x08
    14ba:	89 85       	ldd	r24, Y+9	; 0x09
    14bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ca:	88 23       	and	r24, r24
    14cc:	2c f4       	brge	.+10     	; 0x14d8 <GPIO_ChannelGroupRead+0x20a>
		__ticks = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	9e 83       	std	Y+6, r25	; 0x06
    14d4:	8d 83       	std	Y+5, r24	; 0x05
    14d6:	3f c0       	rjmp	.+126    	; 0x1556 <GPIO_ChannelGroupRead+0x288>
	else if (__tmp > 65535)
    14d8:	6f 81       	ldd	r22, Y+7	; 0x07
    14da:	78 85       	ldd	r23, Y+8	; 0x08
    14dc:	89 85       	ldd	r24, Y+9	; 0x09
    14de:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	3f ef       	ldi	r19, 0xFF	; 255
    14e4:	4f e7       	ldi	r20, 0x7F	; 127
    14e6:	57 e4       	ldi	r21, 0x47	; 71
    14e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14ec:	18 16       	cp	r1, r24
    14ee:	4c f5       	brge	.+82     	; 0x1542 <GPIO_ChannelGroupRead+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f8:	20 e0       	ldi	r18, 0x00	; 0
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	40 e2       	ldi	r20, 0x20	; 32
    14fe:	51 e4       	ldi	r21, 0x41	; 65
    1500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1504:	dc 01       	movw	r26, r24
    1506:	cb 01       	movw	r24, r22
    1508:	bc 01       	movw	r22, r24
    150a:	cd 01       	movw	r24, r26
    150c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	0f c0       	rjmp	.+30     	; 0x1538 <GPIO_ChannelGroupRead+0x26a>
    151a:	89 e1       	ldi	r24, 0x19	; 25
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <GPIO_ChannelGroupRead+0x258>
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	9e 83       	std	Y+6, r25	; 0x06
    1536:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1538:	8d 81       	ldd	r24, Y+5	; 0x05
    153a:	9e 81       	ldd	r25, Y+6	; 0x06
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	69 f7       	brne	.-38     	; 0x151a <GPIO_ChannelGroupRead+0x24c>
    1540:	14 c0       	rjmp	.+40     	; 0x156a <GPIO_ChannelGroupRead+0x29c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	6f 81       	ldd	r22, Y+7	; 0x07
    1544:	78 85       	ldd	r23, Y+8	; 0x08
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	9a 85       	ldd	r25, Y+10	; 0x0a
    154a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	9e 83       	std	Y+6, r25	; 0x06
    1554:	8d 83       	std	Y+5, r24	; 0x05
    1556:	8d 81       	ldd	r24, Y+5	; 0x05
    1558:	9e 81       	ldd	r25, Y+6	; 0x06
    155a:	9a 83       	std	Y+2, r25	; 0x02
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	9a 81       	ldd	r25, Y+2	; 0x02
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <GPIO_ChannelGroupRead+0x294>
    1566:	9a 83       	std	Y+2, r25	; 0x02
    1568:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms((double)30);
				if(GPIO_readPin(port_num, pin_num) == LOGIC_LOW)
    156a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    156c:	6d 8d       	ldd	r22, Y+29	; 0x1d
    156e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    1572:	88 23       	and	r24, r24
    1574:	71 f4       	brne	.+28     	; 0x1592 <GPIO_ChannelGroupRead+0x2c4>
				{
				dataPtr[i] = GPIO_readPin(port_num, pin_num);
    1576:	88 a1       	ldd	r24, Y+32	; 0x20
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	8b a1       	ldd	r24, Y+35	; 0x23
    157e:	9c a1       	ldd	r25, Y+36	; 0x24
    1580:	8c 01       	movw	r16, r24
    1582:	02 0f       	add	r16, r18
    1584:	13 1f       	adc	r17, r19
    1586:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1588:	6d 8d       	ldd	r22, Y+29	; 0x1d
    158a:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    158e:	f8 01       	movw	r30, r16
    1590:	80 83       	st	Z, r24
void GPIO_ChannelGroupRead(ChannelGroupType* ChannelID,uint8 dataPtr[]){
    uint8 i = 0;
    uint8 id=0;
    uint8 port_num=0;
    uint8 pin_num=0;
	for(; i < ChannelID->no_of_channels; ++i)
    1592:	88 a1       	ldd	r24, Y+32	; 0x20
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	88 a3       	std	Y+32, r24	; 0x20
    1598:	e9 a1       	ldd	r30, Y+33	; 0x21
    159a:	fa a1       	ldd	r31, Y+34	; 0x22
    159c:	90 81       	ld	r25, Z
    159e:	88 a1       	ldd	r24, Y+32	; 0x20
    15a0:	89 17       	cp	r24, r25
    15a2:	08 f4       	brcc	.+2      	; 0x15a6 <GPIO_ChannelGroupRead+0x2d8>
    15a4:	a9 ce       	rjmp	.-686    	; 0x12f8 <GPIO_ChannelGroupRead+0x2a>

			}

		}
	}
}
    15a6:	a4 96       	adiw	r28, 0x24	; 36
    15a8:	0f b6       	in	r0, 0x3f	; 63
    15aa:	f8 94       	cli
    15ac:	de bf       	out	0x3e, r29	; 62
    15ae:	0f be       	out	0x3f, r0	; 63
    15b0:	cd bf       	out	0x3d, r28	; 61
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	08 95       	ret

000015bc <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <GPIO_setupPinDirection+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <GPIO_setupPinDirection+0x8>
    15c4:	0f 92       	push	r0
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	89 83       	std	Y+1, r24	; 0x01
    15cc:	6a 83       	std	Y+2, r22	; 0x02
    15ce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	88 30       	cpi	r24, 0x08	; 8
    15d4:	08 f0       	brcs	.+2      	; 0x15d8 <GPIO_setupPinDirection+0x1c>
    15d6:	d5 c0       	rjmp	.+426    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
    15d8:	89 81       	ldd	r24, Y+1	; 0x01
    15da:	84 30       	cpi	r24, 0x04	; 4
    15dc:	08 f0       	brcs	.+2      	; 0x15e0 <GPIO_setupPinDirection+0x24>
    15de:	d1 c0       	rjmp	.+418    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3d 83       	std	Y+5, r19	; 0x05
    15e8:	2c 83       	std	Y+4, r18	; 0x04
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	9d 81       	ldd	r25, Y+5	; 0x05
    15ee:	81 30       	cpi	r24, 0x01	; 1
    15f0:	91 05       	cpc	r25, r1
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <GPIO_setupPinDirection+0x3a>
    15f4:	43 c0       	rjmp	.+134    	; 0x167c <GPIO_setupPinDirection+0xc0>
    15f6:	2c 81       	ldd	r18, Y+4	; 0x04
    15f8:	3d 81       	ldd	r19, Y+5	; 0x05
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	2c f4       	brge	.+10     	; 0x160a <GPIO_setupPinDirection+0x4e>
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	71 f0       	breq	.+28     	; 0x1624 <GPIO_setupPinDirection+0x68>
    1608:	bc c0       	rjmp	.+376    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	09 f4       	brne	.+2      	; 0x1616 <GPIO_setupPinDirection+0x5a>
    1614:	5f c0       	rjmp	.+190    	; 0x16d4 <GPIO_setupPinDirection+0x118>
    1616:	8c 81       	ldd	r24, Y+4	; 0x04
    1618:	9d 81       	ldd	r25, Y+5	; 0x05
    161a:	83 30       	cpi	r24, 0x03	; 3
    161c:	91 05       	cpc	r25, r1
    161e:	09 f4       	brne	.+2      	; 0x1622 <GPIO_setupPinDirection+0x66>
    1620:	85 c0       	rjmp	.+266    	; 0x172c <GPIO_setupPinDirection+0x170>
    1622:	af c0       	rjmp	.+350    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	a1 f4       	brne	.+40     	; 0x1652 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    162a:	aa e3       	ldi	r26, 0x3A	; 58
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	ea e3       	ldi	r30, 0x3A	; 58
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <GPIO_setupPinDirection+0x8c>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <GPIO_setupPinDirection+0x88>
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	98 c0       	rjmp	.+304    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1652:	aa e3       	ldi	r26, 0x3A	; 58
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	ea e3       	ldi	r30, 0x3A	; 58
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <GPIO_setupPinDirection+0xb4>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <GPIO_setupPinDirection+0xb0>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	83 c0       	rjmp	.+262    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1682:	a7 e3       	ldi	r26, 0x37	; 55
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e7 e3       	ldi	r30, 0x37	; 55
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <GPIO_setupPinDirection+0xe4>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <GPIO_setupPinDirection+0xe0>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	6c c0       	rjmp	.+216    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16aa:	a7 e3       	ldi	r26, 0x37	; 55
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e7 e3       	ldi	r30, 0x37	; 55
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <GPIO_setupPinDirection+0x10c>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <GPIO_setupPinDirection+0x108>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	57 c0       	rjmp	.+174    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	a1 f4       	brne	.+40     	; 0x1702 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16da:	a4 e3       	ldi	r26, 0x34	; 52
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e4 e3       	ldi	r30, 0x34	; 52
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	48 2f       	mov	r20, r24
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	02 2e       	mov	r0, r18
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <GPIO_setupPinDirection+0x13c>
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	0a 94       	dec	r0
    16fa:	e2 f7       	brpl	.-8      	; 0x16f4 <GPIO_setupPinDirection+0x138>
    16fc:	84 2b       	or	r24, r20
    16fe:	8c 93       	st	X, r24
    1700:	40 c0       	rjmp	.+128    	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1702:	a4 e3       	ldi	r26, 0x34	; 52
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e4 e3       	ldi	r30, 0x34	; 52
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	48 2f       	mov	r20, r24
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	28 2f       	mov	r18, r24
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	02 2e       	mov	r0, r18
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <GPIO_setupPinDirection+0x164>
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	0a 94       	dec	r0
    1722:	e2 f7       	brpl	.-8      	; 0x171c <GPIO_setupPinDirection+0x160>
    1724:	80 95       	com	r24
    1726:	84 23       	and	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	2b c0       	rjmp	.+86     	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    172c:	8b 81       	ldd	r24, Y+3	; 0x03
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	a1 f4       	brne	.+40     	; 0x175a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1732:	a1 e3       	ldi	r26, 0x31	; 49
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e1 e3       	ldi	r30, 0x31	; 49
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <GPIO_setupPinDirection+0x194>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <GPIO_setupPinDirection+0x190>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    175a:	a1 e3       	ldi	r26, 0x31	; 49
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e1 e3       	ldi	r30, 0x31	; 49
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <GPIO_setupPinDirection+0x1bc>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <GPIO_setupPinDirection+0x1b8>
    177c:	80 95       	com	r24
    177e:	84 23       	and	r24, r20
    1780:	8c 93       	st	X, r24
			break;
		default:
		    break;
		}
	}
}
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	cf 91       	pop	r28
    178e:	df 91       	pop	r29
    1790:	08 95       	ret

00001792 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1792:	df 93       	push	r29
    1794:	cf 93       	push	r28
    1796:	00 d0       	rcall	.+0      	; 0x1798 <GPIO_writePin+0x6>
    1798:	00 d0       	rcall	.+0      	; 0x179a <GPIO_writePin+0x8>
    179a:	0f 92       	push	r0
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	89 83       	std	Y+1, r24	; 0x01
    17a2:	6a 83       	std	Y+2, r22	; 0x02
    17a4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 30       	cpi	r24, 0x08	; 8
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <GPIO_writePin+0x1c>
    17ac:	d5 c0       	rjmp	.+426    	; 0x1958 <GPIO_writePin+0x1c6>
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	84 30       	cpi	r24, 0x04	; 4
    17b2:	08 f0       	brcs	.+2      	; 0x17b6 <GPIO_writePin+0x24>
    17b4:	d1 c0       	rjmp	.+418    	; 0x1958 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	3d 83       	std	Y+5, r19	; 0x05
    17be:	2c 83       	std	Y+4, r18	; 0x04
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	09 f4       	brne	.+2      	; 0x17cc <GPIO_writePin+0x3a>
    17ca:	43 c0       	rjmp	.+134    	; 0x1852 <GPIO_writePin+0xc0>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <GPIO_writePin+0x4e>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	71 f0       	breq	.+28     	; 0x17fa <GPIO_writePin+0x68>
    17de:	bc c0       	rjmp	.+376    	; 0x1958 <GPIO_writePin+0x1c6>
    17e0:	2c 81       	ldd	r18, Y+4	; 0x04
    17e2:	3d 81       	ldd	r19, Y+5	; 0x05
    17e4:	22 30       	cpi	r18, 0x02	; 2
    17e6:	31 05       	cpc	r19, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <GPIO_writePin+0x5a>
    17ea:	5f c0       	rjmp	.+190    	; 0x18aa <GPIO_writePin+0x118>
    17ec:	8c 81       	ldd	r24, Y+4	; 0x04
    17ee:	9d 81       	ldd	r25, Y+5	; 0x05
    17f0:	83 30       	cpi	r24, 0x03	; 3
    17f2:	91 05       	cpc	r25, r1
    17f4:	09 f4       	brne	.+2      	; 0x17f8 <GPIO_writePin+0x66>
    17f6:	85 c0       	rjmp	.+266    	; 0x1902 <GPIO_writePin+0x170>
    17f8:	af c0       	rjmp	.+350    	; 0x1958 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	81 30       	cpi	r24, 0x01	; 1
    17fe:	a1 f4       	brne	.+40     	; 0x1828 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1800:	ab e3       	ldi	r26, 0x3B	; 59
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	48 2f       	mov	r20, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 2e       	mov	r0, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <GPIO_writePin+0x8c>
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	0a 94       	dec	r0
    1820:	e2 f7       	brpl	.-8      	; 0x181a <GPIO_writePin+0x88>
    1822:	84 2b       	or	r24, r20
    1824:	8c 93       	st	X, r24
    1826:	98 c0       	rjmp	.+304    	; 0x1958 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1828:	ab e3       	ldi	r26, 0x3B	; 59
    182a:	b0 e0       	ldi	r27, 0x00	; 0
    182c:	eb e3       	ldi	r30, 0x3B	; 59
    182e:	f0 e0       	ldi	r31, 0x00	; 0
    1830:	80 81       	ld	r24, Z
    1832:	48 2f       	mov	r20, r24
    1834:	8a 81       	ldd	r24, Y+2	; 0x02
    1836:	28 2f       	mov	r18, r24
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	02 2e       	mov	r0, r18
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <GPIO_writePin+0xb4>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	0a 94       	dec	r0
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <GPIO_writePin+0xb0>
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	83 c0       	rjmp	.+262    	; 0x1958 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1852:	8b 81       	ldd	r24, Y+3	; 0x03
    1854:	81 30       	cpi	r24, 0x01	; 1
    1856:	a1 f4       	brne	.+40     	; 0x1880 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1858:	a8 e3       	ldi	r26, 0x38	; 56
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e8 e3       	ldi	r30, 0x38	; 56
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <GPIO_writePin+0xe4>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <GPIO_writePin+0xe0>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	6c c0       	rjmp	.+216    	; 0x1958 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1880:	a8 e3       	ldi	r26, 0x38	; 56
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 2e       	mov	r0, r18
    1898:	02 c0       	rjmp	.+4      	; 0x189e <GPIO_writePin+0x10c>
    189a:	88 0f       	add	r24, r24
    189c:	99 1f       	adc	r25, r25
    189e:	0a 94       	dec	r0
    18a0:	e2 f7       	brpl	.-8      	; 0x189a <GPIO_writePin+0x108>
    18a2:	80 95       	com	r24
    18a4:	84 23       	and	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	57 c0       	rjmp	.+174    	; 0x1958 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18aa:	8b 81       	ldd	r24, Y+3	; 0x03
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	a1 f4       	brne	.+40     	; 0x18d8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18b0:	a5 e3       	ldi	r26, 0x35	; 53
    18b2:	b0 e0       	ldi	r27, 0x00	; 0
    18b4:	e5 e3       	ldi	r30, 0x35	; 53
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	80 81       	ld	r24, Z
    18ba:	48 2f       	mov	r20, r24
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	28 2f       	mov	r18, r24
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <GPIO_writePin+0x13c>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <GPIO_writePin+0x138>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
    18d6:	40 c0       	rjmp	.+128    	; 0x1958 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18d8:	a5 e3       	ldi	r26, 0x35	; 53
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e5 e3       	ldi	r30, 0x35	; 53
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	48 2f       	mov	r20, r24
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <GPIO_writePin+0x164>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <GPIO_writePin+0x160>
    18fa:	80 95       	com	r24
    18fc:	84 23       	and	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	2b c0       	rjmp	.+86     	; 0x1958 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	a1 f4       	brne	.+40     	; 0x1930 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1908:	a2 e3       	ldi	r26, 0x32	; 50
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e2 e3       	ldi	r30, 0x32	; 50
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8a 81       	ldd	r24, Y+2	; 0x02
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	02 2e       	mov	r0, r18
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <GPIO_writePin+0x194>
    1922:	88 0f       	add	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	0a 94       	dec	r0
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <GPIO_writePin+0x190>
    192a:	84 2b       	or	r24, r20
    192c:	8c 93       	st	X, r24
    192e:	14 c0       	rjmp	.+40     	; 0x1958 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1930:	a2 e3       	ldi	r26, 0x32	; 50
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	e2 e3       	ldi	r30, 0x32	; 50
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_writePin+0x1bc>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_writePin+0x1b8>
    1952:	80 95       	com	r24
    1954:	84 23       	and	r24, r20
    1956:	8c 93       	st	X, r24
			break;
		default:
		            break;
		}
	}
}
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	0f 90       	pop	r0
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	cf 91       	pop	r28
    1964:	df 91       	pop	r29
    1966:	08 95       	ret

00001968 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	00 d0       	rcall	.+0      	; 0x196e <GPIO_readPin+0x6>
    196e:	00 d0       	rcall	.+0      	; 0x1970 <GPIO_readPin+0x8>
    1970:	0f 92       	push	r0
    1972:	cd b7       	in	r28, 0x3d	; 61
    1974:	de b7       	in	r29, 0x3e	; 62
    1976:	8a 83       	std	Y+2, r24	; 0x02
    1978:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    197a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 30       	cpi	r24, 0x08	; 8
    1980:	08 f0       	brcs	.+2      	; 0x1984 <GPIO_readPin+0x1c>
    1982:	84 c0       	rjmp	.+264    	; 0x1a8c <GPIO_readPin+0x124>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	84 30       	cpi	r24, 0x04	; 4
    1988:	08 f0       	brcs	.+2      	; 0x198c <GPIO_readPin+0x24>
    198a:	80 c0       	rjmp	.+256    	; 0x1a8c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	3d 83       	std	Y+5, r19	; 0x05
    1994:	2c 83       	std	Y+4, r18	; 0x04
    1996:	4c 81       	ldd	r20, Y+4	; 0x04
    1998:	5d 81       	ldd	r21, Y+5	; 0x05
    199a:	41 30       	cpi	r20, 0x01	; 1
    199c:	51 05       	cpc	r21, r1
    199e:	79 f1       	breq	.+94     	; 0x19fe <GPIO_readPin+0x96>
    19a0:	8c 81       	ldd	r24, Y+4	; 0x04
    19a2:	9d 81       	ldd	r25, Y+5	; 0x05
    19a4:	82 30       	cpi	r24, 0x02	; 2
    19a6:	91 05       	cpc	r25, r1
    19a8:	34 f4       	brge	.+12     	; 0x19b6 <GPIO_readPin+0x4e>
    19aa:	2c 81       	ldd	r18, Y+4	; 0x04
    19ac:	3d 81       	ldd	r19, Y+5	; 0x05
    19ae:	21 15       	cp	r18, r1
    19b0:	31 05       	cpc	r19, r1
    19b2:	69 f0       	breq	.+26     	; 0x19ce <GPIO_readPin+0x66>
    19b4:	6b c0       	rjmp	.+214    	; 0x1a8c <GPIO_readPin+0x124>
    19b6:	4c 81       	ldd	r20, Y+4	; 0x04
    19b8:	5d 81       	ldd	r21, Y+5	; 0x05
    19ba:	42 30       	cpi	r20, 0x02	; 2
    19bc:	51 05       	cpc	r21, r1
    19be:	b9 f1       	breq	.+110    	; 0x1a2e <GPIO_readPin+0xc6>
    19c0:	8c 81       	ldd	r24, Y+4	; 0x04
    19c2:	9d 81       	ldd	r25, Y+5	; 0x05
    19c4:	83 30       	cpi	r24, 0x03	; 3
    19c6:	91 05       	cpc	r25, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <GPIO_readPin+0x64>
    19ca:	49 c0       	rjmp	.+146    	; 0x1a5e <GPIO_readPin+0xf6>
    19cc:	5f c0       	rjmp	.+190    	; 0x1a8c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19ce:	e9 e3       	ldi	r30, 0x39	; 57
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	a9 01       	movw	r20, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <GPIO_readPin+0x7e>
    19e2:	55 95       	asr	r21
    19e4:	47 95       	ror	r20
    19e6:	8a 95       	dec	r24
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <GPIO_readPin+0x7a>
    19ea:	ca 01       	movw	r24, r20
    19ec:	81 70       	andi	r24, 0x01	; 1
    19ee:	90 70       	andi	r25, 0x00	; 0
    19f0:	88 23       	and	r24, r24
    19f2:	19 f0       	breq	.+6      	; 0x19fa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	49 c0       	rjmp	.+146    	; 0x1a8c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19fa:	19 82       	std	Y+1, r1	; 0x01
    19fc:	47 c0       	rjmp	.+142    	; 0x1a8c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19fe:	e6 e3       	ldi	r30, 0x36	; 54
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	28 2f       	mov	r18, r24
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	88 2f       	mov	r24, r24
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	a9 01       	movw	r20, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <GPIO_readPin+0xae>
    1a12:	55 95       	asr	r21
    1a14:	47 95       	ror	r20
    1a16:	8a 95       	dec	r24
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <GPIO_readPin+0xaa>
    1a1a:	ca 01       	movw	r24, r20
    1a1c:	81 70       	andi	r24, 0x01	; 1
    1a1e:	90 70       	andi	r25, 0x00	; 0
    1a20:	88 23       	and	r24, r24
    1a22:	19 f0       	breq	.+6      	; 0x1a2a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	31 c0       	rjmp	.+98     	; 0x1a8c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a2a:	19 82       	std	Y+1, r1	; 0x01
    1a2c:	2f c0       	rjmp	.+94     	; 0x1a8c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a2e:	e3 e3       	ldi	r30, 0x33	; 51
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a9 01       	movw	r20, r18
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <GPIO_readPin+0xde>
    1a42:	55 95       	asr	r21
    1a44:	47 95       	ror	r20
    1a46:	8a 95       	dec	r24
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <GPIO_readPin+0xda>
    1a4a:	ca 01       	movw	r24, r20
    1a4c:	81 70       	andi	r24, 0x01	; 1
    1a4e:	90 70       	andi	r25, 0x00	; 0
    1a50:	88 23       	and	r24, r24
    1a52:	19 f0       	breq	.+6      	; 0x1a5a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	89 83       	std	Y+1, r24	; 0x01
    1a58:	19 c0       	rjmp	.+50     	; 0x1a8c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a5a:	19 82       	std	Y+1, r1	; 0x01
    1a5c:	17 c0       	rjmp	.+46     	; 0x1a8c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a5e:	e0 e3       	ldi	r30, 0x30	; 48
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6a:	88 2f       	mov	r24, r24
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a9 01       	movw	r20, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_readPin+0x10e>
    1a72:	55 95       	asr	r21
    1a74:	47 95       	ror	r20
    1a76:	8a 95       	dec	r24
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_readPin+0x10a>
    1a7a:	ca 01       	movw	r24, r20
    1a7c:	81 70       	andi	r24, 0x01	; 1
    1a7e:	90 70       	andi	r25, 0x00	; 0
    1a80:	88 23       	and	r24, r24
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a8a:	19 82       	std	Y+1, r1	; 0x01
		default:
		            break;
		}
	}

	return pin_value;
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	00 d0       	rcall	.+0      	; 0x1aa4 <GPIO_setupPortDirection+0x6>
    1aa4:	00 d0       	rcall	.+0      	; 0x1aa6 <GPIO_setupPortDirection+0x8>
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	84 30       	cpi	r24, 0x04	; 4
    1ab2:	90 f5       	brcc	.+100    	; 0x1b18 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3c 83       	std	Y+4, r19	; 0x04
    1abc:	2b 83       	std	Y+3, r18	; 0x03
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	81 30       	cpi	r24, 0x01	; 1
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	d1 f0       	breq	.+52     	; 0x1afc <GPIO_setupPortDirection+0x5e>
    1ac8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aca:	3c 81       	ldd	r19, Y+4	; 0x04
    1acc:	22 30       	cpi	r18, 0x02	; 2
    1ace:	31 05       	cpc	r19, r1
    1ad0:	2c f4       	brge	.+10     	; 0x1adc <GPIO_setupPortDirection+0x3e>
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	00 97       	sbiw	r24, 0x00	; 0
    1ad8:	61 f0       	breq	.+24     	; 0x1af2 <GPIO_setupPortDirection+0x54>
    1ada:	1e c0       	rjmp	.+60     	; 0x1b18 <GPIO_setupPortDirection+0x7a>
    1adc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ade:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae0:	22 30       	cpi	r18, 0x02	; 2
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	81 f0       	breq	.+32     	; 0x1b06 <GPIO_setupPortDirection+0x68>
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	83 30       	cpi	r24, 0x03	; 3
    1aec:	91 05       	cpc	r25, r1
    1aee:	81 f0       	breq	.+32     	; 0x1b10 <GPIO_setupPortDirection+0x72>
    1af0:	13 c0       	rjmp	.+38     	; 0x1b18 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1af2:	ea e3       	ldi	r30, 0x3A	; 58
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	8a 81       	ldd	r24, Y+2	; 0x02
    1af8:	80 83       	st	Z, r24
    1afa:	0e c0       	rjmp	.+28     	; 0x1b18 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1afc:	e7 e3       	ldi	r30, 0x37	; 55
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	80 83       	st	Z, r24
    1b04:	09 c0       	rjmp	.+18     	; 0x1b18 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b06:	e4 e3       	ldi	r30, 0x34	; 52
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	80 83       	st	Z, r24
    1b0e:	04 c0       	rjmp	.+8      	; 0x1b18 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b10:	e1 e3       	ldi	r30, 0x31	; 49
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	80 83       	st	Z, r24
			break;
		default:
		            break;
		}
	}
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <GPIO_writePort+0x6>
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <GPIO_writePort+0x8>
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b36:	89 81       	ldd	r24, Y+1	; 0x01
    1b38:	84 30       	cpi	r24, 0x04	; 4
    1b3a:	90 f5       	brcc	.+100    	; 0x1ba0 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b3c:	89 81       	ldd	r24, Y+1	; 0x01
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	3c 83       	std	Y+4, r19	; 0x04
    1b44:	2b 83       	std	Y+3, r18	; 0x03
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	d1 f0       	breq	.+52     	; 0x1b84 <GPIO_writePort+0x5e>
    1b50:	2b 81       	ldd	r18, Y+3	; 0x03
    1b52:	3c 81       	ldd	r19, Y+4	; 0x04
    1b54:	22 30       	cpi	r18, 0x02	; 2
    1b56:	31 05       	cpc	r19, r1
    1b58:	2c f4       	brge	.+10     	; 0x1b64 <GPIO_writePort+0x3e>
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5e:	00 97       	sbiw	r24, 0x00	; 0
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <GPIO_writePort+0x54>
    1b62:	1e c0       	rjmp	.+60     	; 0x1ba0 <GPIO_writePort+0x7a>
    1b64:	2b 81       	ldd	r18, Y+3	; 0x03
    1b66:	3c 81       	ldd	r19, Y+4	; 0x04
    1b68:	22 30       	cpi	r18, 0x02	; 2
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	81 f0       	breq	.+32     	; 0x1b8e <GPIO_writePort+0x68>
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	83 30       	cpi	r24, 0x03	; 3
    1b74:	91 05       	cpc	r25, r1
    1b76:	81 f0       	breq	.+32     	; 0x1b98 <GPIO_writePort+0x72>
    1b78:	13 c0       	rjmp	.+38     	; 0x1ba0 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b7a:	eb e3       	ldi	r30, 0x3B	; 59
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b80:	80 83       	st	Z, r24
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b84:	e8 e3       	ldi	r30, 0x38	; 56
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	80 83       	st	Z, r24
    1b8c:	09 c0       	rjmp	.+18     	; 0x1ba0 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b8e:	e5 e3       	ldi	r30, 0x35	; 53
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	80 83       	st	Z, r24
    1b96:	04 c0       	rjmp	.+8      	; 0x1ba0 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b98:	e2 e3       	ldi	r30, 0x32	; 50
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	80 83       	st	Z, r24
			break;
		default:
		            break;
		}
	}
}
    1ba0:	0f 90       	pop	r0
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	cf 91       	pop	r28
    1baa:	df 91       	pop	r29
    1bac:	08 95       	ret

00001bae <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bae:	df 93       	push	r29
    1bb0:	cf 93       	push	r28
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <GPIO_readPort+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <GPIO_readPort+0x8>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bbc:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc0:	84 30       	cpi	r24, 0x04	; 4
    1bc2:	90 f5       	brcc	.+100    	; 0x1c28 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	3c 83       	std	Y+4, r19	; 0x04
    1bcc:	2b 83       	std	Y+3, r18	; 0x03
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	d1 f0       	breq	.+52     	; 0x1c0c <GPIO_readPort+0x5e>
    1bd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bda:	3c 81       	ldd	r19, Y+4	; 0x04
    1bdc:	22 30       	cpi	r18, 0x02	; 2
    1bde:	31 05       	cpc	r19, r1
    1be0:	2c f4       	brge	.+10     	; 0x1bec <GPIO_readPort+0x3e>
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	9c 81       	ldd	r25, Y+4	; 0x04
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	61 f0       	breq	.+24     	; 0x1c02 <GPIO_readPort+0x54>
    1bea:	1e c0       	rjmp	.+60     	; 0x1c28 <GPIO_readPort+0x7a>
    1bec:	2b 81       	ldd	r18, Y+3	; 0x03
    1bee:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf0:	22 30       	cpi	r18, 0x02	; 2
    1bf2:	31 05       	cpc	r19, r1
    1bf4:	81 f0       	breq	.+32     	; 0x1c16 <GPIO_readPort+0x68>
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	83 30       	cpi	r24, 0x03	; 3
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	81 f0       	breq	.+32     	; 0x1c20 <GPIO_readPort+0x72>
    1c00:	13 c0       	rjmp	.+38     	; 0x1c28 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c02:	e9 e3       	ldi	r30, 0x39	; 57
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	0e c0       	rjmp	.+28     	; 0x1c28 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c0c:	e6 e3       	ldi	r30, 0x36	; 54
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	09 c0       	rjmp	.+18     	; 0x1c28 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c16:	e3 e3       	ldi	r30, 0x33	; 51
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	89 83       	std	Y+1, r24	; 0x01
    1c1e:	04 c0       	rjmp	.+8      	; 0x1c28 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c20:	e0 e3       	ldi	r30, 0x30	; 48
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	89 83       	std	Y+1, r24	; 0x01
		default:
		            break;
		}
	}

	return value;
    1c28:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <GLOBAL_INTERRUPT_ENABLE>:
#include "EXT_INTTERUPT.h"



void GLOBAL_INTERRUPT_ENABLE(void)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
	sei();
    1c40:	78 94       	sei
}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <GLOBAL_INTERRUPT_DISABLE>:

void GLOBAL_INTERRUPT_DISABLE(void)
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	cli();
    1c50:	f8 94       	cli
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <INT0_init>:

void INT0_init( EXT_triggerType triggerType,GPIO_PinDirectionType direction)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <INT0_init+0x6>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	89 83       	std	Y+1, r24	; 0x01
    1c64:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_setupPinDirection(PORTD_ID,PIN2_ID,direction);/*set pin as input pin  or input pulled up*/
    1c66:	83 e0       	ldi	r24, 0x03	; 3
    1c68:	62 e0       	ldi	r22, 0x02	; 2
    1c6a:	4a 81       	ldd	r20, Y+2	; 0x02
    1c6c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	MCUCR = (MCUCR & 0xFC) | triggerType;/*set type of trigger*/
    1c70:	a5 e5       	ldi	r26, 0x55	; 85
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e5 e5       	ldi	r30, 0x55	; 85
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	9c 7f       	andi	r25, 0xFC	; 252
    1c7e:	89 81       	ldd	r24, Y+1	; 0x01
    1c80:	89 2b       	or	r24, r25
    1c82:	8c 93       	st	X, r24
	SET_BIT(GICR ,6); /*enable INT0*/
    1c84:	ab e5       	ldi	r26, 0x5B	; 91
    1c86:	b0 e0       	ldi	r27, 0x00	; 0
    1c88:	eb e5       	ldi	r30, 0x5B	; 91
    1c8a:	f0 e0       	ldi	r31, 0x00	; 0
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 64       	ori	r24, 0x40	; 64
    1c90:	8c 93       	st	X, r24
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	08 95       	ret

00001c9c <INT0_deInit>:



void INT0_deInit(void)
{
    1c9c:	df 93       	push	r29
    1c9e:	cf 93       	push	r28
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(GICR ,6);
    1ca4:	ab e5       	ldi	r26, 0x5B	; 91
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	eb e5       	ldi	r30, 0x5B	; 91
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	8f 7b       	andi	r24, 0xBF	; 191
    1cb0:	8c 93       	st	X, r24
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1cc0:	83 e0       	ldi	r24, 0x03	; 3
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	41 e0       	ldi	r20, 0x01	; 1
    1cc6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1cca:	83 e0       	ldi	r24, 0x03	; 3
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	41 e0       	ldi	r20, 0x01	; 1
    1cd0:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1cd4:	83 e0       	ldi	r24, 0x03	; 3
    1cd6:	62 e0       	ldi	r22, 0x02	; 2
    1cd8:	41 e0       	ldi	r20, 0x01	; 1
    1cda:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1cde:	82 e0       	ldi	r24, 0x02	; 2
    1ce0:	6f ef       	ldi	r22, 0xFF	; 255
    1ce2:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1ce6:	88 e3       	ldi	r24, 0x38	; 56
    1ce8:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1cec:	8c e0       	ldi	r24, 0x0C	; 12
    1cee:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1cf2:	81 e0       	ldi	r24, 0x01	; 1
    1cf4:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_sendCommand>
}
    1cf8:	cf 91       	pop	r28
    1cfa:	df 91       	pop	r29
    1cfc:	08 95       	ret

00001cfe <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1cfe:	df 93       	push	r29
    1d00:	cf 93       	push	r28
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	e9 97       	sbiw	r28, 0x39	; 57
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1d1e:	83 e0       	ldi	r24, 0x03	; 3
    1d20:	61 e0       	ldi	r22, 0x01	; 1
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	a0 e8       	ldi	r26, 0x80	; 128
    1d2e:	bf e3       	ldi	r27, 0x3F	; 63
    1d30:	8d ab       	std	Y+53, r24	; 0x35
    1d32:	9e ab       	std	Y+54, r25	; 0x36
    1d34:	af ab       	std	Y+55, r26	; 0x37
    1d36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d38:	6d a9       	ldd	r22, Y+53	; 0x35
    1d3a:	7e a9       	ldd	r23, Y+54	; 0x36
    1d3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	30 e0       	ldi	r19, 0x00	; 0
    1d44:	4a e7       	ldi	r20, 0x7A	; 122
    1d46:	53 e4       	ldi	r21, 0x43	; 67
    1d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	89 ab       	std	Y+49, r24	; 0x31
    1d52:	9a ab       	std	Y+50, r25	; 0x32
    1d54:	ab ab       	std	Y+51, r26	; 0x33
    1d56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d58:	69 a9       	ldd	r22, Y+49	; 0x31
    1d5a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	2c f4       	brge	.+10     	; 0x1d7a <LCD_sendCommand+0x7c>
		__ticks = 1;
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	98 ab       	std	Y+48, r25	; 0x30
    1d76:	8f a7       	std	Y+47, r24	; 0x2f
    1d78:	3f c0       	rjmp	.+126    	; 0x1df8 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1d7a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d7c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d7e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d80:	9c a9       	ldd	r25, Y+52	; 0x34
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	3f ef       	ldi	r19, 0xFF	; 255
    1d86:	4f e7       	ldi	r20, 0x7F	; 127
    1d88:	57 e4       	ldi	r21, 0x47	; 71
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d8e:	18 16       	cp	r1, r24
    1d90:	4c f5       	brge	.+82     	; 0x1de4 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d92:	6d a9       	ldd	r22, Y+53	; 0x35
    1d94:	7e a9       	ldd	r23, Y+54	; 0x36
    1d96:	8f a9       	ldd	r24, Y+55	; 0x37
    1d98:	98 ad       	ldd	r25, Y+56	; 0x38
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e2       	ldi	r20, 0x20	; 32
    1da0:	51 e4       	ldi	r21, 0x41	; 65
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	bc 01       	movw	r22, r24
    1dac:	cd 01       	movw	r24, r26
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	98 ab       	std	Y+48, r25	; 0x30
    1db8:	8f a7       	std	Y+47, r24	; 0x2f
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <LCD_sendCommand+0xdc>
    1dbc:	89 e1       	ldi	r24, 0x19	; 25
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	9e a7       	std	Y+46, r25	; 0x2e
    1dc2:	8d a7       	std	Y+45, r24	; 0x2d
    1dc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_sendCommand+0xca>
    1dcc:	9e a7       	std	Y+46, r25	; 0x2e
    1dce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dd2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	98 ab       	std	Y+48, r25	; 0x30
    1dd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ddc:	98 a9       	ldd	r25, Y+48	; 0x30
    1dde:	00 97       	sbiw	r24, 0x00	; 0
    1de0:	69 f7       	brne	.-38     	; 0x1dbc <LCD_sendCommand+0xbe>
    1de2:	14 c0       	rjmp	.+40     	; 0x1e0c <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de4:	69 a9       	ldd	r22, Y+49	; 0x31
    1de6:	7a a9       	ldd	r23, Y+50	; 0x32
    1de8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dea:	9c a9       	ldd	r25, Y+52	; 0x34
    1dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df0:	dc 01       	movw	r26, r24
    1df2:	cb 01       	movw	r24, r22
    1df4:	98 ab       	std	Y+48, r25	; 0x30
    1df6:	8f a7       	std	Y+47, r24	; 0x2f
    1df8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1dfc:	9c a7       	std	Y+44, r25	; 0x2c
    1dfe:	8b a7       	std	Y+43, r24	; 0x2b
    1e00:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e02:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_sendCommand+0x106>
    1e08:	9c a7       	std	Y+44, r25	; 0x2c
    1e0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms((double)1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e0c:	83 e0       	ldi	r24, 0x03	; 3
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	a0 e8       	ldi	r26, 0x80	; 128
    1e1c:	bf e3       	ldi	r27, 0x3F	; 63
    1e1e:	8f a3       	std	Y+39, r24	; 0x27
    1e20:	98 a7       	std	Y+40, r25	; 0x28
    1e22:	a9 a7       	std	Y+41, r26	; 0x29
    1e24:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e26:	6f a1       	ldd	r22, Y+39	; 0x27
    1e28:	78 a5       	ldd	r23, Y+40	; 0x28
    1e2a:	89 a5       	ldd	r24, Y+41	; 0x29
    1e2c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	53 e4       	ldi	r21, 0x43	; 67
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	8b a3       	std	Y+35, r24	; 0x23
    1e40:	9c a3       	std	Y+36, r25	; 0x24
    1e42:	ad a3       	std	Y+37, r26	; 0x25
    1e44:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e46:	6b a1       	ldd	r22, Y+35	; 0x23
    1e48:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	40 e8       	ldi	r20, 0x80	; 128
    1e54:	5f e3       	ldi	r21, 0x3F	; 63
    1e56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e5a:	88 23       	and	r24, r24
    1e5c:	2c f4       	brge	.+10     	; 0x1e68 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9a a3       	std	Y+34, r25	; 0x22
    1e64:	89 a3       	std	Y+33, r24	; 0x21
    1e66:	3f c0       	rjmp	.+126    	; 0x1ee6 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1e68:	6b a1       	ldd	r22, Y+35	; 0x23
    1e6a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e6c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e6e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	3f ef       	ldi	r19, 0xFF	; 255
    1e74:	4f e7       	ldi	r20, 0x7F	; 127
    1e76:	57 e4       	ldi	r21, 0x47	; 71
    1e78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e7c:	18 16       	cp	r1, r24
    1e7e:	4c f5       	brge	.+82     	; 0x1ed2 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e80:	6f a1       	ldd	r22, Y+39	; 0x27
    1e82:	78 a5       	ldd	r23, Y+40	; 0x28
    1e84:	89 a5       	ldd	r24, Y+41	; 0x29
    1e86:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e2       	ldi	r20, 0x20	; 32
    1e8e:	51 e4       	ldi	r21, 0x41	; 65
    1e90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e94:	dc 01       	movw	r26, r24
    1e96:	cb 01       	movw	r24, r22
    1e98:	bc 01       	movw	r22, r24
    1e9a:	cd 01       	movw	r24, r26
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9a a3       	std	Y+34, r25	; 0x22
    1ea6:	89 a3       	std	Y+33, r24	; 0x21
    1ea8:	0f c0       	rjmp	.+30     	; 0x1ec8 <LCD_sendCommand+0x1ca>
    1eaa:	89 e1       	ldi	r24, 0x19	; 25
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	98 a3       	std	Y+32, r25	; 0x20
    1eb0:	8f 8f       	std	Y+31, r24	; 0x1f
    1eb2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb4:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb6:	01 97       	sbiw	r24, 0x01	; 1
    1eb8:	f1 f7       	brne	.-4      	; 0x1eb6 <LCD_sendCommand+0x1b8>
    1eba:	98 a3       	std	Y+32, r25	; 0x20
    1ebc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebe:	89 a1       	ldd	r24, Y+33	; 0x21
    1ec0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ec2:	01 97       	sbiw	r24, 0x01	; 1
    1ec4:	9a a3       	std	Y+34, r25	; 0x22
    1ec6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eca:	9a a1       	ldd	r25, Y+34	; 0x22
    1ecc:	00 97       	sbiw	r24, 0x00	; 0
    1ece:	69 f7       	brne	.-38     	; 0x1eaa <LCD_sendCommand+0x1ac>
    1ed0:	14 c0       	rjmp	.+40     	; 0x1efa <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9a a3       	std	Y+34, r25	; 0x22
    1ee4:	89 a3       	std	Y+33, r24	; 0x21
    1ee6:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee8:	9a a1       	ldd	r25, Y+34	; 0x22
    1eea:	9e 8f       	std	Y+30, r25	; 0x1e
    1eec:	8d 8f       	std	Y+29, r24	; 0x1d
    1eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ef0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ef2:	01 97       	sbiw	r24, 0x01	; 1
    1ef4:	f1 f7       	brne	.-4      	; 0x1ef2 <LCD_sendCommand+0x1f4>
    1ef6:	9e 8f       	std	Y+30, r25	; 0x1e
    1ef8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms((double)1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	69 ad       	ldd	r22, Y+57	; 0x39
    1efe:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <GPIO_writePort>
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 e8       	ldi	r26, 0x80	; 128
    1f08:	bf e3       	ldi	r27, 0x3F	; 63
    1f0a:	89 8f       	std	Y+25, r24	; 0x19
    1f0c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f0e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	69 8d       	ldd	r22, Y+25	; 0x19
    1f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	53 e4       	ldi	r21, 0x43	; 67
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8d 8b       	std	Y+21, r24	; 0x15
    1f2c:	9e 8b       	std	Y+22, r25	; 0x16
    1f2e:	af 8b       	std	Y+23, r26	; 0x17
    1f30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f32:	6d 89       	ldd	r22, Y+21	; 0x15
    1f34:	7e 89       	ldd	r23, Y+22	; 0x16
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <LCD_sendCommand+0x256>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9c 8b       	std	Y+20, r25	; 0x14
    1f50:	8b 8b       	std	Y+19, r24	; 0x13
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1f54:	6d 89       	ldd	r22, Y+21	; 0x15
    1f56:	7e 89       	ldd	r23, Y+22	; 0x16
    1f58:	8f 89       	ldd	r24, Y+23	; 0x17
    1f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9c 8b       	std	Y+20, r25	; 0x14
    1f92:	8b 8b       	std	Y+19, r24	; 0x13
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_sendCommand+0x2b6>
    1f96:	89 e1       	ldi	r24, 0x19	; 25
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9a 8b       	std	Y+18, r25	; 0x12
    1f9c:	89 8b       	std	Y+17, r24	; 0x11
    1f9e:	89 89       	ldd	r24, Y+17	; 0x11
    1fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_sendCommand+0x2a4>
    1fa6:	9a 8b       	std	Y+18, r25	; 0x12
    1fa8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8b 89       	ldd	r24, Y+19	; 0x13
    1fac:	9c 89       	ldd	r25, Y+20	; 0x14
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9c 8b       	std	Y+20, r25	; 0x14
    1fb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <LCD_sendCommand+0x298>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd6:	98 8b       	std	Y+16, r25	; 0x10
    1fd8:	8f 87       	std	Y+15, r24	; 0x0f
    1fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fdc:	98 89       	ldd	r25, Y+16	; 0x10
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_sendCommand+0x2e0>
    1fe2:	98 8b       	std	Y+16, r25	; 0x10
    1fe4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms((double)1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	62 e0       	ldi	r22, 0x02	; 2
    1fea:	40 e0       	ldi	r20, 0x00	; 0
    1fec:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a0 e8       	ldi	r26, 0x80	; 128
    1ff6:	bf e3       	ldi	r27, 0x3F	; 63
    1ff8:	8b 87       	std	Y+11, r24	; 0x0b
    1ffa:	9c 87       	std	Y+12, r25	; 0x0c
    1ffc:	ad 87       	std	Y+13, r26	; 0x0d
    1ffe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4a e7       	ldi	r20, 0x7A	; 122
    200e:	53 e4       	ldi	r21, 0x43	; 67
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	8f 83       	std	Y+7, r24	; 0x07
    201a:	98 87       	std	Y+8, r25	; 0x08
    201c:	a9 87       	std	Y+9, r26	; 0x09
    201e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2020:	6f 81       	ldd	r22, Y+7	; 0x07
    2022:	78 85       	ldd	r23, Y+8	; 0x08
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	2c f4       	brge	.+10     	; 0x2042 <LCD_sendCommand+0x344>
		__ticks = 1;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	9e 83       	std	Y+6, r25	; 0x06
    203e:	8d 83       	std	Y+5, r24	; 0x05
    2040:	3f c0       	rjmp	.+126    	; 0x20c0 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    2042:	6f 81       	ldd	r22, Y+7	; 0x07
    2044:	78 85       	ldd	r23, Y+8	; 0x08
    2046:	89 85       	ldd	r24, Y+9	; 0x09
    2048:	9a 85       	ldd	r25, Y+10	; 0x0a
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	3f ef       	ldi	r19, 0xFF	; 255
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	57 e4       	ldi	r21, 0x47	; 71
    2052:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	4c f5       	brge	.+82     	; 0x20ac <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    205a:	6b 85       	ldd	r22, Y+11	; 0x0b
    205c:	7c 85       	ldd	r23, Y+12	; 0x0c
    205e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2060:	9e 85       	ldd	r25, Y+14	; 0x0e
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e2       	ldi	r20, 0x20	; 32
    2068:	51 e4       	ldi	r21, 0x41	; 65
    206a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	bc 01       	movw	r22, r24
    2074:	cd 01       	movw	r24, r26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	0f c0       	rjmp	.+30     	; 0x20a2 <LCD_sendCommand+0x3a4>
    2084:	89 e1       	ldi	r24, 0x19	; 25
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	9c 83       	std	Y+4, r25	; 0x04
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_sendCommand+0x392>
    2094:	9c 83       	std	Y+4, r25	; 0x04
    2096:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2098:	8d 81       	ldd	r24, Y+5	; 0x05
    209a:	9e 81       	ldd	r25, Y+6	; 0x06
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	9e 83       	std	Y+6, r25	; 0x06
    20a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	8d 81       	ldd	r24, Y+5	; 0x05
    20a4:	9e 81       	ldd	r25, Y+6	; 0x06
    20a6:	00 97       	sbiw	r24, 0x00	; 0
    20a8:	69 f7       	brne	.-38     	; 0x2084 <LCD_sendCommand+0x386>
    20aa:	14 c0       	rjmp	.+40     	; 0x20d4 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ac:	6f 81       	ldd	r22, Y+7	; 0x07
    20ae:	78 85       	ldd	r23, Y+8	; 0x08
    20b0:	89 85       	ldd	r24, Y+9	; 0x09
    20b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e 83       	std	Y+6, r25	; 0x06
    20be:	8d 83       	std	Y+5, r24	; 0x05
    20c0:	8d 81       	ldd	r24, Y+5	; 0x05
    20c2:	9e 81       	ldd	r25, Y+6	; 0x06
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	89 83       	std	Y+1, r24	; 0x01
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	9a 81       	ldd	r25, Y+2	; 0x02
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_sendCommand+0x3ce>
    20d0:	9a 83       	std	Y+2, r25	; 0x02
    20d2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms((double)1); /* delay for processing Th = 13ns */
}
    20d4:	e9 96       	adiw	r28, 0x39	; 57
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	de bf       	out	0x3e, r29	; 62
    20dc:	0f be       	out	0x3f, r0	; 63
    20de:	cd bf       	out	0x3d, r28	; 61
    20e0:	cf 91       	pop	r28
    20e2:	df 91       	pop	r29
    20e4:	08 95       	ret

000020e6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20e6:	df 93       	push	r29
    20e8:	cf 93       	push	r28
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	e9 97       	sbiw	r28, 0x39	; 57
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	60 e0       	ldi	r22, 0x00	; 0
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	61 e0       	ldi	r22, 0x01	; 1
    210a:	40 e0       	ldi	r20, 0x00	; 0
    210c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	a0 e8       	ldi	r26, 0x80	; 128
    2116:	bf e3       	ldi	r27, 0x3F	; 63
    2118:	8d ab       	std	Y+53, r24	; 0x35
    211a:	9e ab       	std	Y+54, r25	; 0x36
    211c:	af ab       	std	Y+55, r26	; 0x37
    211e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6d a9       	ldd	r22, Y+53	; 0x35
    2122:	7e a9       	ldd	r23, Y+54	; 0x36
    2124:	8f a9       	ldd	r24, Y+55	; 0x37
    2126:	98 ad       	ldd	r25, Y+56	; 0x38
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a e7       	ldi	r20, 0x7A	; 122
    212e:	53 e4       	ldi	r21, 0x43	; 67
    2130:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	89 ab       	std	Y+49, r24	; 0x31
    213a:	9a ab       	std	Y+50, r25	; 0x32
    213c:	ab ab       	std	Y+51, r26	; 0x33
    213e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2140:	69 a9       	ldd	r22, Y+49	; 0x31
    2142:	7a a9       	ldd	r23, Y+50	; 0x32
    2144:	8b a9       	ldd	r24, Y+51	; 0x33
    2146:	9c a9       	ldd	r25, Y+52	; 0x34
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	98 ab       	std	Y+48, r25	; 0x30
    215e:	8f a7       	std	Y+47, r24	; 0x2f
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2162:	69 a9       	ldd	r22, Y+49	; 0x31
    2164:	7a a9       	ldd	r23, Y+50	; 0x32
    2166:	8b a9       	ldd	r24, Y+51	; 0x33
    2168:	9c a9       	ldd	r25, Y+52	; 0x34
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6d a9       	ldd	r22, Y+53	; 0x35
    217c:	7e a9       	ldd	r23, Y+54	; 0x36
    217e:	8f a9       	ldd	r24, Y+55	; 0x37
    2180:	98 ad       	ldd	r25, Y+56	; 0x38
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	98 ab       	std	Y+48, r25	; 0x30
    21a0:	8f a7       	std	Y+47, r24	; 0x2f
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_displayCharacter+0xdc>
    21a4:	89 e1       	ldi	r24, 0x19	; 25
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9e a7       	std	Y+46, r25	; 0x2e
    21aa:	8d a7       	std	Y+45, r24	; 0x2d
    21ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    21ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_displayCharacter+0xca>
    21b4:	9e a7       	std	Y+46, r25	; 0x2e
    21b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ba:	98 a9       	ldd	r25, Y+48	; 0x30
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	98 ab       	std	Y+48, r25	; 0x30
    21c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21c4:	98 a9       	ldd	r25, Y+48	; 0x30
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_displayCharacter+0xbe>
    21ca:	14 c0       	rjmp	.+40     	; 0x21f4 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	69 a9       	ldd	r22, Y+49	; 0x31
    21ce:	7a a9       	ldd	r23, Y+50	; 0x32
    21d0:	8b a9       	ldd	r24, Y+51	; 0x33
    21d2:	9c a9       	ldd	r25, Y+52	; 0x34
    21d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	98 ab       	std	Y+48, r25	; 0x30
    21de:	8f a7       	std	Y+47, r24	; 0x2f
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	9c a7       	std	Y+44, r25	; 0x2c
    21e6:	8b a7       	std	Y+43, r24	; 0x2b
    21e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_displayCharacter+0x106>
    21f0:	9c a7       	std	Y+44, r25	; 0x2c
    21f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms((double)1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	62 e0       	ldi	r22, 0x02	; 2
    21f8:	41 e0       	ldi	r20, 0x01	; 1
    21fa:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	8f a3       	std	Y+39, r24	; 0x27
    2208:	98 a7       	std	Y+40, r25	; 0x28
    220a:	a9 a7       	std	Y+41, r26	; 0x29
    220c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6f a1       	ldd	r22, Y+39	; 0x27
    2210:	78 a5       	ldd	r23, Y+40	; 0x28
    2212:	89 a5       	ldd	r24, Y+41	; 0x29
    2214:	9a a5       	ldd	r25, Y+42	; 0x2a
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	53 e4       	ldi	r21, 0x43	; 67
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8b a3       	std	Y+35, r24	; 0x23
    2228:	9c a3       	std	Y+36, r25	; 0x24
    222a:	ad a3       	std	Y+37, r26	; 0x25
    222c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    222e:	6b a1       	ldd	r22, Y+35	; 0x23
    2230:	7c a1       	ldd	r23, Y+36	; 0x24
    2232:	8d a1       	ldd	r24, Y+37	; 0x25
    2234:	9e a1       	ldd	r25, Y+38	; 0x26
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9a a3       	std	Y+34, r25	; 0x22
    224c:	89 a3       	std	Y+33, r24	; 0x21
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2250:	6b a1       	ldd	r22, Y+35	; 0x23
    2252:	7c a1       	ldd	r23, Y+36	; 0x24
    2254:	8d a1       	ldd	r24, Y+37	; 0x25
    2256:	9e a1       	ldd	r25, Y+38	; 0x26
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6f a1       	ldd	r22, Y+39	; 0x27
    226a:	78 a5       	ldd	r23, Y+40	; 0x28
    226c:	89 a5       	ldd	r24, Y+41	; 0x29
    226e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9a a3       	std	Y+34, r25	; 0x22
    228e:	89 a3       	std	Y+33, r24	; 0x21
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_displayCharacter+0x1ca>
    2292:	89 e1       	ldi	r24, 0x19	; 25
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	98 a3       	std	Y+32, r25	; 0x20
    2298:	8f 8f       	std	Y+31, r24	; 0x1f
    229a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    229c:	98 a1       	ldd	r25, Y+32	; 0x20
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_displayCharacter+0x1b8>
    22a2:	98 a3       	std	Y+32, r25	; 0x20
    22a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	89 a1       	ldd	r24, Y+33	; 0x21
    22a8:	9a a1       	ldd	r25, Y+34	; 0x22
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9a a3       	std	Y+34, r25	; 0x22
    22ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	89 a1       	ldd	r24, Y+33	; 0x21
    22b2:	9a a1       	ldd	r25, Y+34	; 0x22
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_displayCharacter+0x1ac>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6b a1       	ldd	r22, Y+35	; 0x23
    22bc:	7c a1       	ldd	r23, Y+36	; 0x24
    22be:	8d a1       	ldd	r24, Y+37	; 0x25
    22c0:	9e a1       	ldd	r25, Y+38	; 0x26
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9a a3       	std	Y+34, r25	; 0x22
    22cc:	89 a3       	std	Y+33, r24	; 0x21
    22ce:	89 a1       	ldd	r24, Y+33	; 0x21
    22d0:	9a a1       	ldd	r25, Y+34	; 0x22
    22d2:	9e 8f       	std	Y+30, r25	; 0x1e
    22d4:	8d 8f       	std	Y+29, r24	; 0x1d
    22d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_displayCharacter+0x1f4>
    22de:	9e 8f       	std	Y+30, r25	; 0x1e
    22e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms((double)1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	69 ad       	ldd	r22, Y+57	; 0x39
    22e6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <GPIO_writePort>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	a0 e8       	ldi	r26, 0x80	; 128
    22f0:	bf e3       	ldi	r27, 0x3F	; 63
    22f2:	89 8f       	std	Y+25, r24	; 0x19
    22f4:	9a 8f       	std	Y+26, r25	; 0x1a
    22f6:	ab 8f       	std	Y+27, r26	; 0x1b
    22f8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fa:	69 8d       	ldd	r22, Y+25	; 0x19
    22fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2300:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	4a e7       	ldi	r20, 0x7A	; 122
    2308:	53 e4       	ldi	r21, 0x43	; 67
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	8d 8b       	std	Y+21, r24	; 0x15
    2314:	9e 8b       	std	Y+22, r25	; 0x16
    2316:	af 8b       	std	Y+23, r26	; 0x17
    2318:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    231a:	6d 89       	ldd	r22, Y+21	; 0x15
    231c:	7e 89       	ldd	r23, Y+22	; 0x16
    231e:	8f 89       	ldd	r24, Y+23	; 0x17
    2320:	98 8d       	ldd	r25, Y+24	; 0x18
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e8       	ldi	r20, 0x80	; 128
    2328:	5f e3       	ldi	r21, 0x3F	; 63
    232a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232e:	88 23       	and	r24, r24
    2330:	2c f4       	brge	.+10     	; 0x233c <LCD_displayCharacter+0x256>
		__ticks = 1;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	9c 8b       	std	Y+20, r25	; 0x14
    2338:	8b 8b       	std	Y+19, r24	; 0x13
    233a:	3f c0       	rjmp	.+126    	; 0x23ba <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	3f ef       	ldi	r19, 0xFF	; 255
    2348:	4f e7       	ldi	r20, 0x7F	; 127
    234a:	57 e4       	ldi	r21, 0x47	; 71
    234c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2350:	18 16       	cp	r1, r24
    2352:	4c f5       	brge	.+82     	; 0x23a6 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2354:	69 8d       	ldd	r22, Y+25	; 0x19
    2356:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2358:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	40 e2       	ldi	r20, 0x20	; 32
    2362:	51 e4       	ldi	r21, 0x41	; 65
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	bc 01       	movw	r22, r24
    236e:	cd 01       	movw	r24, r26
    2370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	9c 8b       	std	Y+20, r25	; 0x14
    237a:	8b 8b       	std	Y+19, r24	; 0x13
    237c:	0f c0       	rjmp	.+30     	; 0x239c <LCD_displayCharacter+0x2b6>
    237e:	89 e1       	ldi	r24, 0x19	; 25
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	9a 8b       	std	Y+18, r25	; 0x12
    2384:	89 8b       	std	Y+17, r24	; 0x11
    2386:	89 89       	ldd	r24, Y+17	; 0x11
    2388:	9a 89       	ldd	r25, Y+18	; 0x12
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_displayCharacter+0x2a4>
    238e:	9a 8b       	std	Y+18, r25	; 0x12
    2390:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2392:	8b 89       	ldd	r24, Y+19	; 0x13
    2394:	9c 89       	ldd	r25, Y+20	; 0x14
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	9c 8b       	std	Y+20, r25	; 0x14
    239a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239c:	8b 89       	ldd	r24, Y+19	; 0x13
    239e:	9c 89       	ldd	r25, Y+20	; 0x14
    23a0:	00 97       	sbiw	r24, 0x00	; 0
    23a2:	69 f7       	brne	.-38     	; 0x237e <LCD_displayCharacter+0x298>
    23a4:	14 c0       	rjmp	.+40     	; 0x23ce <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a6:	6d 89       	ldd	r22, Y+21	; 0x15
    23a8:	7e 89       	ldd	r23, Y+22	; 0x16
    23aa:	8f 89       	ldd	r24, Y+23	; 0x17
    23ac:	98 8d       	ldd	r25, Y+24	; 0x18
    23ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	9c 8b       	std	Y+20, r25	; 0x14
    23b8:	8b 8b       	std	Y+19, r24	; 0x13
    23ba:	8b 89       	ldd	r24, Y+19	; 0x13
    23bc:	9c 89       	ldd	r25, Y+20	; 0x14
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	8f 87       	std	Y+15, r24	; 0x0f
    23c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c4:	98 89       	ldd	r25, Y+16	; 0x10
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	f1 f7       	brne	.-4      	; 0x23c6 <LCD_displayCharacter+0x2e0>
    23ca:	98 8b       	std	Y+16, r25	; 0x10
    23cc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms((double)1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    23ce:	83 e0       	ldi	r24, 0x03	; 3
    23d0:	62 e0       	ldi	r22, 0x02	; 2
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    23d8:	80 e0       	ldi	r24, 0x00	; 0
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	a0 e8       	ldi	r26, 0x80	; 128
    23de:	bf e3       	ldi	r27, 0x3F	; 63
    23e0:	8b 87       	std	Y+11, r24	; 0x0b
    23e2:	9c 87       	std	Y+12, r25	; 0x0c
    23e4:	ad 87       	std	Y+13, r26	; 0x0d
    23e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	4a e7       	ldi	r20, 0x7A	; 122
    23f6:	53 e4       	ldi	r21, 0x43	; 67
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	8f 83       	std	Y+7, r24	; 0x07
    2402:	98 87       	std	Y+8, r25	; 0x08
    2404:	a9 87       	std	Y+9, r26	; 0x09
    2406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2408:	6f 81       	ldd	r22, Y+7	; 0x07
    240a:	78 85       	ldd	r23, Y+8	; 0x08
    240c:	89 85       	ldd	r24, Y+9	; 0x09
    240e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	40 e8       	ldi	r20, 0x80	; 128
    2416:	5f e3       	ldi	r21, 0x3F	; 63
    2418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    241c:	88 23       	and	r24, r24
    241e:	2c f4       	brge	.+10     	; 0x242a <LCD_displayCharacter+0x344>
		__ticks = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9e 83       	std	Y+6, r25	; 0x06
    2426:	8d 83       	std	Y+5, r24	; 0x05
    2428:	3f c0       	rjmp	.+126    	; 0x24a8 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	3f ef       	ldi	r19, 0xFF	; 255
    2436:	4f e7       	ldi	r20, 0x7F	; 127
    2438:	57 e4       	ldi	r21, 0x47	; 71
    243a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    243e:	18 16       	cp	r1, r24
    2440:	4c f5       	brge	.+82     	; 0x2494 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2442:	6b 85       	ldd	r22, Y+11	; 0x0b
    2444:	7c 85       	ldd	r23, Y+12	; 0x0c
    2446:	8d 85       	ldd	r24, Y+13	; 0x0d
    2448:	9e 85       	ldd	r25, Y+14	; 0x0e
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e2       	ldi	r20, 0x20	; 32
    2450:	51 e4       	ldi	r21, 0x41	; 65
    2452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2456:	dc 01       	movw	r26, r24
    2458:	cb 01       	movw	r24, r22
    245a:	bc 01       	movw	r22, r24
    245c:	cd 01       	movw	r24, r26
    245e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	9e 83       	std	Y+6, r25	; 0x06
    2468:	8d 83       	std	Y+5, r24	; 0x05
    246a:	0f c0       	rjmp	.+30     	; 0x248a <LCD_displayCharacter+0x3a4>
    246c:	89 e1       	ldi	r24, 0x19	; 25
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	8b 83       	std	Y+3, r24	; 0x03
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	9c 81       	ldd	r25, Y+4	; 0x04
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_displayCharacter+0x392>
    247c:	9c 83       	std	Y+4, r25	; 0x04
    247e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2480:	8d 81       	ldd	r24, Y+5	; 0x05
    2482:	9e 81       	ldd	r25, Y+6	; 0x06
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	9e 83       	std	Y+6, r25	; 0x06
    2488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248a:	8d 81       	ldd	r24, Y+5	; 0x05
    248c:	9e 81       	ldd	r25, Y+6	; 0x06
    248e:	00 97       	sbiw	r24, 0x00	; 0
    2490:	69 f7       	brne	.-38     	; 0x246c <LCD_displayCharacter+0x386>
    2492:	14 c0       	rjmp	.+40     	; 0x24bc <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2494:	6f 81       	ldd	r22, Y+7	; 0x07
    2496:	78 85       	ldd	r23, Y+8	; 0x08
    2498:	89 85       	ldd	r24, Y+9	; 0x09
    249a:	9a 85       	ldd	r25, Y+10	; 0x0a
    249c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	8d 83       	std	Y+5, r24	; 0x05
    24a8:	8d 81       	ldd	r24, Y+5	; 0x05
    24aa:	9e 81       	ldd	r25, Y+6	; 0x06
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	01 97       	sbiw	r24, 0x01	; 1
    24b6:	f1 f7       	brne	.-4      	; 0x24b4 <LCD_displayCharacter+0x3ce>
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms((double)1); /* delay for processing Th = 13ns */
}
    24bc:	e9 96       	adiw	r28, 0x39	; 57
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char Str[])
{
    24ce:	df 93       	push	r29
    24d0:	cf 93       	push	r28
    24d2:	00 d0       	rcall	.+0      	; 0x24d4 <LCD_displayString+0x6>
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62
    24da:	9b 83       	std	Y+3, r25	; 0x03
    24dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24de:	19 82       	std	Y+1, r1	; 0x01
    24e0:	0e c0       	rjmp	.+28     	; 0x24fe <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	8a 81       	ldd	r24, Y+2	; 0x02
    24ea:	9b 81       	ldd	r25, Y+3	; 0x03
    24ec:	fc 01       	movw	r30, r24
    24ee:	e2 0f       	add	r30, r18
    24f0:	f3 1f       	adc	r31, r19
    24f2:	80 81       	ld	r24, Z
    24f4:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_displayCharacter>
		i++;
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	8f 5f       	subi	r24, 0xFF	; 255
    24fc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char Str[])
{
	uint8 i = 0;
	while(Str[i] != '\0')
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	28 2f       	mov	r18, r24
    2502:	30 e0       	ldi	r19, 0x00	; 0
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	9b 81       	ldd	r25, Y+3	; 0x03
    2508:	fc 01       	movw	r30, r24
    250a:	e2 0f       	add	r30, r18
    250c:	f3 1f       	adc	r31, r19
    250e:	80 81       	ld	r24, Z
    2510:	88 23       	and	r24, r24
    2512:	39 f7       	brne	.-50     	; 0x24e2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <LCD_moveCursor+0x6>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <LCD_moveCursor+0x8>
    2528:	0f 92       	push	r0
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	3d 83       	std	Y+5, r19	; 0x05
    253a:	2c 83       	std	Y+4, r18	; 0x04
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	91 05       	cpc	r25, r1
    2544:	c1 f0       	breq	.+48     	; 0x2576 <LCD_moveCursor+0x56>
    2546:	2c 81       	ldd	r18, Y+4	; 0x04
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_moveCursor+0x3a>
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	61 f0       	breq	.+24     	; 0x2570 <LCD_moveCursor+0x50>
    2558:	19 c0       	rjmp	.+50     	; 0x258c <LCD_moveCursor+0x6c>
    255a:	2c 81       	ldd	r18, Y+4	; 0x04
    255c:	3d 81       	ldd	r19, Y+5	; 0x05
    255e:	22 30       	cpi	r18, 0x02	; 2
    2560:	31 05       	cpc	r19, r1
    2562:	69 f0       	breq	.+26     	; 0x257e <LCD_moveCursor+0x5e>
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	61 f0       	breq	.+24     	; 0x2586 <LCD_moveCursor+0x66>
    256e:	0e c0       	rjmp	.+28     	; 0x258c <LCD_moveCursor+0x6c>
	{
		case (uint8)0:
			lcd_memory_address=col;
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	0b c0       	rjmp	.+22     	; 0x258c <LCD_moveCursor+0x6c>
				break;
		case (uint8)1:
			lcd_memory_address=col+(uint8)0x40;
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	80 5c       	subi	r24, 0xC0	; 192
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	07 c0       	rjmp	.+14     	; 0x258c <LCD_moveCursor+0x6c>
				break;
		case (uint8)2:
			lcd_memory_address=col+(uint8)0x10;
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	80 5f       	subi	r24, 0xF0	; 240
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	03 c0       	rjmp	.+6      	; 0x258c <LCD_moveCursor+0x6c>
				break;
		case (uint8)3:
			lcd_memory_address=col+(uint8)0x50;
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	80 5b       	subi	r24, 0xB0	; 176
    258a:	89 83       	std	Y+1, r24	; 0x01
				break;
		default:
		    break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 68       	ori	r24, 0x80	; 128
    2590:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_sendCommand>
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <LCD_displayStringRowColumn+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <LCD_displayStringRowColumn+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	6a 83       	std	Y+2, r22	; 0x02
    25b4:	5c 83       	std	Y+4, r21	; 0x04
    25b6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	6a 81       	ldd	r22, Y+2	; 0x02
    25bc:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(sint32 data)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
    25de:	64 97       	sbiw	r28, 0x14	; 20
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
    25ea:	69 8b       	std	Y+17, r22	; 0x11
    25ec:	7a 8b       	std	Y+18, r23	; 0x12
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
    25f0:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]={0}; /* String to hold the ascii result */
    25f2:	80 e1       	ldi	r24, 0x10	; 16
    25f4:	fe 01       	movw	r30, r28
    25f6:	31 96       	adiw	r30, 0x01	; 1
    25f8:	df 01       	movw	r26, r30
    25fa:	98 2f       	mov	r25, r24
    25fc:	1d 92       	st	X+, r1
    25fe:	9a 95       	dec	r25
    2600:	e9 f7       	brne	.-6      	; 0x25fc <LCD_intgerToString+0x26>
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2602:	89 89       	ldd	r24, Y+17	; 0x11
    2604:	9a 89       	ldd	r25, Y+18	; 0x12
    2606:	9e 01       	movw	r18, r28
    2608:	2f 5f       	subi	r18, 0xFF	; 255
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	b9 01       	movw	r22, r18
    260e:	4a e0       	ldi	r20, 0x0A	; 10
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	0e 94 a1 18 	call	0x3142	; 0x3142 <itoa>
   LCD_displayString(buff); /* Display the string */
    2616:	ce 01       	movw	r24, r28
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	0e 94 67 12 	call	0x24ce	; 0x24ce <LCD_displayString>
}
    261e:	64 96       	adiw	r28, 0x14	; 20
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <LCD_sendCommand>
}
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <DcMotor_Init>:

#include "dc_motor.h"

/* this function set pin direction*/
void DcMotor_Init(void){
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN1,PIN_OUTPUT);
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN2,PIN_OUTPUT);
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	61 e0       	ldi	r22, 0x01	; 1
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
GPIO_setupPinDirection(MOTOR_PORT_ENABLE_PIN, MOTOR_ENABLE_PIN,PIN_OUTPUT);
    2660:	83 e0       	ldi	r24, 0x03	; 3
    2662:	67 e0       	ldi	r22, 0x07	; 7
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
}
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <DcMotor_Rotate>:

/* this function write the value of the pin*/
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <DcMotor_Rotate+0x6>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	89 83       	std	Y+1, r24	; 0x01
    267c:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_writePin(MOTOR_PORT, MOTOR_PIN1,(uint8)(state)&(uint8)1);
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	98 2f       	mov	r25, r24
    2682:	91 70       	andi	r25, 0x01	; 1
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	49 2f       	mov	r20, r25
    268a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	GPIO_writePin(MOTOR_PORT, MOTOR_PIN2,(((uint8)state)&((uint8)1<<1)));
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	98 2f       	mov	r25, r24
    2692:	92 70       	andi	r25, 0x02	; 2
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	61 e0       	ldi	r22, 0x01	; 1
    2698:	49 2f       	mov	r20, r25
    269a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>

	PWM_Timer2_Start(speed);
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	0e 94 14 08 	call	0x1028	; 0x1028 <PWM_Timer2_Start>

}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	cf 91       	pop	r28
    26aa:	df 91       	pop	r29
    26ac:	08 95       	ret

000026ae <button_init>:
 * Description :
 * Setup the direction of the required button to  input.
 * Setup the pull up or tri state
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void button_init(uint8 port_num, uint8 pin_num,BUTTON_DefualtInputType DefualtInput){
    26ae:	df 93       	push	r29
    26b0:	cf 93       	push	r28
    26b2:	00 d0       	rcall	.+0      	; 0x26b4 <button_init+0x6>
    26b4:	0f 92       	push	r0
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	89 83       	std	Y+1, r24	; 0x01
    26bc:	6a 83       	std	Y+2, r22	; 0x02
    26be:	4b 83       	std	Y+3, r20	; 0x03

	GPIO_setupPinDirection( port_num,  pin_num, PIN_INPUT);
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	6a 81       	ldd	r22, Y+2	; 0x02
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>

	if(DefualtInput == PULL_UP){
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	31 f4       	brne	.+12     	; 0x26dc <button_init+0x2e>
		GPIO_writePin( port_num,  pin_num, LOGIC_HIGH);
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	6a 81       	ldd	r22, Y+2	; 0x02
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    26da:	05 c0       	rjmp	.+10     	; 0x26e6 <button_init+0x38>
	}
	else
	{
		GPIO_writePin( port_num,  pin_num, LOGIC_LOW);
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	6a 81       	ldd	r22, Y+2	; 0x02
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	}
}
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	0f 90       	pop	r0
    26ec:	cf 91       	pop	r28
    26ee:	df 91       	pop	r29
    26f0:	08 95       	ret

000026f2 <read_button>:
/*
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 read_button(uint8 port_num, uint8 pin_num){
    26f2:	df 93       	push	r29
    26f4:	cf 93       	push	r28
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <read_button+0x6>
    26f8:	0f 92       	push	r0
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	8a 83       	std	Y+2, r24	; 0x02
    2700:	6b 83       	std	Y+3, r22	; 0x03

	uint8 pin_value = LOGIC_LOW;
    2702:	19 82       	std	Y+1, r1	; 0x01

	pin_value = GPIO_readPin( port_num,  pin_num);
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	6b 81       	ldd	r22, Y+3	; 0x03
    2708:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    270c:	89 83       	std	Y+1, r24	; 0x01

	return pin_value;
    270e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	cf 91       	pop	r28
    2718:	df 91       	pop	r29
    271a:	08 95       	ret

0000271c <TC72_Init>:

#include "TC72.h"


void TC72_Init(unsigned char  mode)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	0f 92       	push	r0
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	64 e0       	ldi	r22, 0x04	; 4
    272c:	41 e0       	ldi	r20, 0x01	; 1
    272e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	SPI_sendReceiveByte(0x80);
    2732:	80 e8       	ldi	r24, 0x80	; 128
    2734:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
	SPI_sendReceiveByte(mode);
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	64 e0       	ldi	r22, 0x04	; 4
    2742:	40 e0       	ldi	r20, 0x00	; 0
    2744:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
}
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <TC72_ReadTemp>:

unsigned char TC72_ReadTemp(void)
{
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	0f 92       	push	r0
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
	unsigned char data=0;
    275a:	19 82       	std	Y+1, r1	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	64 e0       	ldi	r22, 0x04	; 4
    2760:	41 e0       	ldi	r20, 0x01	; 1
    2762:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	SPI_sendReceiveByte(0x02);
    2766:	82 e0       	ldi	r24, 0x02	; 2
    2768:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
	data = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    276c:	8f ef       	ldi	r24, 0xFF	; 255
    276e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <SPI_sendReceiveByte>
    2772:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	64 e0       	ldi	r22, 0x04	; 4
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	return data;
    277e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2780:	0f 90       	pop	r0
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

00002788 <Handle_data>:

#include "PollingDataClient.h"

sint16 integral=0;
void Handle_data(uint8 temperature)
{
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	00 d0       	rcall	.+0      	; 0x2796 <Handle_data+0xe>
    2796:	00 d0       	rcall	.+0      	; 0x2798 <Handle_data+0x10>
    2798:	00 d0       	rcall	.+0      	; 0x279a <Handle_data+0x12>
    279a:	cd b7       	in	r28, 0x3d	; 61
    279c:	de b7       	in	r29, 0x3e	; 62
    279e:	8e 83       	std	Y+6, r24	; 0x06
	sint8 current_temperature = temperature;
    27a0:	8e 81       	ldd	r24, Y+6	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
	sint8 target_temperature = 30;
    27a4:	8e e1       	ldi	r24, 0x1E	; 30
    27a6:	8c 83       	std	Y+4, r24	; 0x04

	sint8 error =  current_temperature - target_temperature;
    27a8:	9d 81       	ldd	r25, Y+5	; 0x05
    27aa:	8c 81       	ldd	r24, Y+4	; 0x04
    27ac:	29 2f       	mov	r18, r25
    27ae:	28 1b       	sub	r18, r24
    27b0:	82 2f       	mov	r24, r18
    27b2:	8b 83       	std	Y+3, r24	; 0x03
	integral = integral + (error);
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	28 2f       	mov	r18, r24
    27b8:	33 27       	eor	r19, r19
    27ba:	27 fd       	sbrc	r18, 7
    27bc:	30 95       	com	r19
    27be:	80 91 3e 02 	lds	r24, 0x023E
    27c2:	90 91 3f 02 	lds	r25, 0x023F
    27c6:	82 0f       	add	r24, r18
    27c8:	93 1f       	adc	r25, r19
    27ca:	90 93 3f 02 	sts	0x023F, r25
    27ce:	80 93 3e 02 	sts	0x023E, r24
	sint16 PWM_signal = (KP * error*10) +(KI * integral*10);
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	99 27       	eor	r25, r25
    27d6:	87 fd       	sbrc	r24, 7
    27d8:	90 95       	com	r25
    27da:	a9 2f       	mov	r26, r25
    27dc:	b9 2f       	mov	r27, r25
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	bc 01       	movw	r22, r24
    27ec:	cd 01       	movw	r24, r26
    27ee:	2d ec       	ldi	r18, 0xCD	; 205
    27f0:	3c ec       	ldi	r19, 0xCC	; 204
    27f2:	4c ec       	ldi	r20, 0xCC	; 204
    27f4:	5d e3       	ldi	r21, 0x3D	; 61
    27f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e2       	ldi	r20, 0x20	; 32
    2808:	51 e4       	ldi	r21, 0x41	; 65
    280a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	7c 01       	movw	r14, r24
    2814:	8d 01       	movw	r16, r26
    2816:	80 91 3e 02 	lds	r24, 0x023E
    281a:	90 91 3f 02 	lds	r25, 0x023F
    281e:	aa 27       	eor	r26, r26
    2820:	97 fd       	sbrc	r25, 7
    2822:	a0 95       	com	r26
    2824:	ba 2f       	mov	r27, r26
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	2a e0       	ldi	r18, 0x0A	; 10
    2838:	37 ed       	ldi	r19, 0xD7	; 215
    283a:	43 e2       	ldi	r20, 0x23	; 35
    283c:	5c e3       	ldi	r21, 0x3C	; 60
    283e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e2       	ldi	r20, 0x20	; 32
    2850:	51 e4       	ldi	r21, 0x41	; 65
    2852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2856:	dc 01       	movw	r26, r24
    2858:	cb 01       	movw	r24, r22
    285a:	9c 01       	movw	r18, r24
    285c:	ad 01       	movw	r20, r26
    285e:	c8 01       	movw	r24, r16
    2860:	b7 01       	movw	r22, r14
    2862:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2866:	dc 01       	movw	r26, r24
    2868:	cb 01       	movw	r24, r22
    286a:	bc 01       	movw	r22, r24
    286c:	cd 01       	movw	r24, r26
    286e:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    2872:	dc 01       	movw	r26, r24
    2874:	cb 01       	movw	r24, r22
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	if(PWM_signal > 186 )
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	8b 3b       	cpi	r24, 0xBB	; 187
    2880:	91 05       	cpc	r25, r1
    2882:	2c f0       	brlt	.+10     	; 0x288e <Handle_data+0x106>
	{
		PWM_signal = 186;
    2884:	8a eb       	ldi	r24, 0xBA	; 186
    2886:	90 e0       	ldi	r25, 0x00	; 0
    2888:	9a 83       	std	Y+2, r25	; 0x02
    288a:	89 83       	std	Y+1, r24	; 0x01
    288c:	06 c0       	rjmp	.+12     	; 0x289a <Handle_data+0x112>
	}
	else if(PWM_signal  < 0)
    288e:	89 81       	ldd	r24, Y+1	; 0x01
    2890:	9a 81       	ldd	r25, Y+2	; 0x02
    2892:	99 23       	and	r25, r25
    2894:	14 f4       	brge	.+4      	; 0x289a <Handle_data+0x112>
	{
		PWM_signal = 0;
    2896:	1a 82       	std	Y+2, r1	; 0x02
    2898:	19 82       	std	Y+1, r1	; 0x01
	}

	DcMotor_Rotate(clockwise,(PWM_signal));
    289a:	99 81       	ldd	r25, Y+1	; 0x01
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	69 2f       	mov	r22, r25
    28a0:	0e 94 38 13 	call	0x2670	; 0x2670 <DcMotor_Rotate>
	LCD_displayStringRowColumn((uint8)0,(uint8)11,"  ");
    28a4:	20 e6       	ldi	r18, 0x60	; 96
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	6b e0       	ldi	r22, 0x0B	; 11
    28ac:	a9 01       	movw	r20, r18
    28ae:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn((uint8)1,(uint8)11,"  ");
    28b2:	20 e6       	ldi	r18, 0x60	; 96
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	6b e0       	ldi	r22, 0x0B	; 11
    28ba:	a9 01       	movw	r20, r18
    28bc:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>
	LCD_moveCursor(0,9);
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	69 e0       	ldi	r22, 0x09	; 9
    28c4:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
	LCD_intgerToString(temperature);
    28c8:	8e 81       	ldd	r24, Y+6	; 0x06
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	a0 e0       	ldi	r26, 0x00	; 0
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	bc 01       	movw	r22, r24
    28d4:	cd 01       	movw	r24, r26
    28d6:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_intgerToString>
	LCD_moveCursor(1,9);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	69 e0       	ldi	r22, 0x09	; 9
    28de:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
	LCD_intgerToString(PWM_signal);
    28e2:	89 81       	ldd	r24, Y+1	; 0x01
    28e4:	9a 81       	ldd	r25, Y+2	; 0x02
    28e6:	aa 27       	eor	r26, r26
    28e8:	97 fd       	sbrc	r25, 7
    28ea:	a0 95       	com	r26
    28ec:	ba 2f       	mov	r27, r26
    28ee:	bc 01       	movw	r22, r24
    28f0:	cd 01       	movw	r24, r26
    28f2:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_intgerToString>
}
    28f6:	26 96       	adiw	r28, 0x06	; 6
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	08 95       	ret

00002910 <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	0f 92       	push	r0
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
    291a:	80 91 8d 01 	lds	r24, 0x018D
    291e:	90 91 8e 01 	lds	r25, 0x018E
    2922:	00 97       	sbiw	r24, 0x00	; 0
    2924:	61 f0       	breq	.+24     	; 0x293e <Poll+0x2e>
    2926:	80 91 40 02 	lds	r24, 0x0240
    292a:	90 91 41 02 	lds	r25, 0x0241
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	31 f4       	brne	.+12     	; 0x293e <Poll+0x2e>
	{
		uint8 data;
		data = TC72_ReadTemp();
    2932:	0e 94 a8 13 	call	0x2750	; 0x2750 <TC72_ReadTemp>
    2936:	89 83       	std	Y+1, r24	; 0x01
		Handle_data(data);
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	0e 94 c4 13 	call	0x2788	; 0x2788 <Handle_data>

	}
	counter++;
    293e:	80 91 40 02 	lds	r24, 0x0240
    2942:	90 91 41 02 	lds	r25, 0x0241
    2946:	01 96       	adiw	r24, 0x01	; 1
    2948:	90 93 41 02 	sts	0x0241, r25
    294c:	80 93 40 02 	sts	0x0240, r24
	counter = counter%polling_counter;
    2950:	80 91 40 02 	lds	r24, 0x0240
    2954:	90 91 41 02 	lds	r25, 0x0241
    2958:	20 91 8f 01 	lds	r18, 0x018F
    295c:	30 91 90 01 	lds	r19, 0x0190
    2960:	b9 01       	movw	r22, r18
    2962:	0e 94 43 18 	call	0x3086	; 0x3086 <__divmodhi4>
    2966:	90 93 41 02 	sts	0x0241, r25
    296a:	80 93 40 02 	sts	0x0240, r24
}
    296e:	0f 90       	pop	r0
    2970:	cf 91       	pop	r28
    2972:	df 91       	pop	r29
    2974:	08 95       	ret

00002976 <StartPolling>:

void StartPolling(void)
{
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	90 93 8e 01 	sts	0x018E, r25
    2986:	80 93 8d 01 	sts	0x018D, r24
}
    298a:	cf 91       	pop	r28
    298c:	df 91       	pop	r29
    298e:	08 95       	ret

00002990 <StopPolling>:

void StopPolling(void)
{
    2990:	df 93       	push	r29
    2992:	cf 93       	push	r28
    2994:	cd b7       	in	r28, 0x3d	; 61
    2996:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=0;
    2998:	10 92 8e 01 	sts	0x018E, r1
    299c:	10 92 8d 01 	sts	0x018D, r1
}
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <SetPollingTime>:

void SetPollingTime(int polling_time)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <SetPollingTime+0x6>
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	9a 83       	std	Y+2, r25	; 0x02
    29b2:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/100;
    29b4:	89 81       	ldd	r24, Y+1	; 0x01
    29b6:	9a 81       	ldd	r25, Y+2	; 0x02
    29b8:	24 e6       	ldi	r18, 0x64	; 100
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	b9 01       	movw	r22, r18
    29be:	0e 94 43 18 	call	0x3086	; 0x3086 <__divmodhi4>
    29c2:	cb 01       	movw	r24, r22
    29c4:	90 93 90 01 	sts	0x0190, r25
    29c8:	80 93 8f 01 	sts	0x018F, r24
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <accept_client_1>:
#include "client.h"
#include"../../MCAL/gpio/gpio.h"



void accept_client_1(void){
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62

	if(GPIO_readPin(PORTC_ID, PIN1_ID)==GPIO_PIN_LEVEL_LOW)
    29de:	82 e0       	ldi	r24, 0x02	; 2
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    29e6:	88 23       	and	r24, r24
    29e8:	31 f4       	brne	.+12     	; 0x29f6 <accept_client_1+0x20>
	{
	GPIO_writePin(PORTC_ID, PIN1_ID,GPIO_PIN_LEVEL_HIGH);
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	61 e0       	ldi	r22, 0x01	; 1
    29ee:	41 e0       	ldi	r20, 0x01	; 1
    29f0:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <accept_client_1+0x2a>
	}
	else
	{
	GPIO_writePin(PORTC_ID, PIN1_ID,GPIO_PIN_LEVEL_LOW);
    29f6:	82 e0       	ldi	r24, 0x02	; 2
    29f8:	61 e0       	ldi	r22, 0x01	; 1
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	}
}
    2a00:	cf 91       	pop	r28
    2a02:	df 91       	pop	r29
    2a04:	08 95       	ret

00002a06 <accept_client_2>:
#include "client.h"
#include"../../MCAL/gpio/gpio.h"



void accept_client_2(void){
    2a06:	df 93       	push	r29
    2a08:	cf 93       	push	r28
    2a0a:	cd b7       	in	r28, 0x3d	; 61
    2a0c:	de b7       	in	r29, 0x3e	; 62

	if(GPIO_readPin(PORTC_ID, PIN0_ID)==GPIO_PIN_LEVEL_LOW)
    2a0e:	82 e0       	ldi	r24, 0x02	; 2
    2a10:	60 e0       	ldi	r22, 0x00	; 0
    2a12:	0e 94 b4 0c 	call	0x1968	; 0x1968 <GPIO_readPin>
    2a16:	88 23       	and	r24, r24
    2a18:	31 f4       	brne	.+12     	; 0x2a26 <accept_client_2+0x20>
	{
	GPIO_writePin(PORTC_ID, PIN0_ID,GPIO_PIN_LEVEL_HIGH);
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	60 e0       	ldi	r22, 0x00	; 0
    2a1e:	41 e0       	ldi	r20, 0x01	; 1
    2a20:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
    2a24:	05 c0       	rjmp	.+10     	; 0x2a30 <accept_client_2+0x2a>
	}
	else
	{
	GPIO_writePin(PORTC_ID, PIN0_ID,GPIO_PIN_LEVEL_LOW);
    2a26:	82 e0       	ldi	r24, 0x02	; 2
    2a28:	60 e0       	ldi	r22, 0x00	; 0
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	0e 94 c9 0b 	call	0x1792	; 0x1792 <GPIO_writePin>
	}
}
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <subscribe>:

static char flag = 0;


void subscribe(void(*ptr)(void))
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <subscribe+0x6>
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <subscribe+0x8>
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	9c 83       	std	Y+4, r25	; 0x04
    2a44:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0 ; i<MAX_SUB;i++)
    2a46:	1a 82       	std	Y+2, r1	; 0x02
    2a48:	19 82       	std	Y+1, r1	; 0x01
    2a4a:	1c c0       	rjmp	.+56     	; 0x2a84 <subscribe+0x4e>
	{
	        if (arr[i]==0)
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	fc 01       	movw	r30, r24
    2a56:	ee 5b       	subi	r30, 0xBE	; 190
    2a58:	fd 4f       	sbci	r31, 0xFD	; 253
    2a5a:	80 81       	ld	r24, Z
    2a5c:	91 81       	ldd	r25, Z+1	; 0x01
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	61 f4       	brne	.+24     	; 0x2a7a <subscribe+0x44>
	        {
	            arr[i]=ptr;
    2a62:	89 81       	ldd	r24, Y+1	; 0x01
    2a64:	9a 81       	ldd	r25, Y+2	; 0x02
    2a66:	88 0f       	add	r24, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	ee 5b       	subi	r30, 0xBE	; 190
    2a6e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	9c 81       	ldd	r25, Y+4	; 0x04
    2a74:	91 83       	std	Z+1, r25	; 0x01
    2a76:	80 83       	st	Z, r24
    2a78:	0a c0       	rjmp	.+20     	; 0x2a8e <subscribe+0x58>
static char flag = 0;


void subscribe(void(*ptr)(void))
{
	for (int i=0 ; i<MAX_SUB;i++)
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	01 96       	adiw	r24, 0x01	; 1
    2a80:	9a 83       	std	Y+2, r25	; 0x02
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	9a 81       	ldd	r25, Y+2	; 0x02
    2a88:	8a 30       	cpi	r24, 0x0A	; 10
    2a8a:	91 05       	cpc	r25, r1
    2a8c:	fc f2       	brlt	.-66     	; 0x2a4c <subscribe+0x16>
	            arr[i]=ptr;
	            break;
	        }
	    }

}
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	0f 90       	pop	r0
    2a94:	0f 90       	pop	r0
    2a96:	cf 91       	pop	r28
    2a98:	df 91       	pop	r29
    2a9a:	08 95       	ret

00002a9c <unsubscribe>:

void unsubscribe(void(*ptr)(void))
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <unsubscribe+0x6>
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <unsubscribe+0x8>
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9c 83       	std	Y+4, r25	; 0x04
    2aaa:	8b 83       	std	Y+3, r24	; 0x03
	for (int i=0 ; i<MAX_SUB;i++)
    2aac:	1a 82       	std	Y+2, r1	; 0x02
    2aae:	19 82       	std	Y+1, r1	; 0x01
    2ab0:	1c c0       	rjmp	.+56     	; 0x2aea <unsubscribe+0x4e>
	{
	        if (arr[i]==ptr)
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ab6:	88 0f       	add	r24, r24
    2ab8:	99 1f       	adc	r25, r25
    2aba:	fc 01       	movw	r30, r24
    2abc:	ee 5b       	subi	r30, 0xBE	; 190
    2abe:	fd 4f       	sbci	r31, 0xFD	; 253
    2ac0:	20 81       	ld	r18, Z
    2ac2:	31 81       	ldd	r19, Z+1	; 0x01
    2ac4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac8:	28 17       	cp	r18, r24
    2aca:	39 07       	cpc	r19, r25
    2acc:	49 f4       	brne	.+18     	; 0x2ae0 <unsubscribe+0x44>
	        {
	            arr[i]=0;
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	88 0f       	add	r24, r24
    2ad4:	99 1f       	adc	r25, r25
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	ee 5b       	subi	r30, 0xBE	; 190
    2ada:	fd 4f       	sbci	r31, 0xFD	; 253
    2adc:	11 82       	std	Z+1, r1	; 0x01
    2ade:	10 82       	st	Z, r1

}

void unsubscribe(void(*ptr)(void))
{
	for (int i=0 ; i<MAX_SUB;i++)
    2ae0:	89 81       	ldd	r24, Y+1	; 0x01
    2ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	9a 83       	std	Y+2, r25	; 0x02
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	9a 81       	ldd	r25, Y+2	; 0x02
    2aee:	8a 30       	cpi	r24, 0x0A	; 10
    2af0:	91 05       	cpc	r25, r1
    2af2:	fc f2       	brlt	.-66     	; 0x2ab2 <unsubscribe+0x16>
	            arr[i]=0;

	        }
	    }

}
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	0f 90       	pop	r0
    2afa:	0f 90       	pop	r0
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <notify>:

void notify()
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <notify+0x6>
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62

	if(flag==1)
    2b0c:	80 91 56 02 	lds	r24, 0x0256
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	29 f5       	brne	.+74     	; 0x2b5e <notify+0x5c>
	{
	flag = 0;
    2b14:	10 92 56 02 	sts	0x0256, r1
	for (int i=0 ; i<MAX_SUB;i++)
    2b18:	1a 82       	std	Y+2, r1	; 0x02
    2b1a:	19 82       	std	Y+1, r1	; 0x01
    2b1c:	1b c0       	rjmp	.+54     	; 0x2b54 <notify+0x52>
	{
		if (arr[i]!=0)
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	9a 81       	ldd	r25, Y+2	; 0x02
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	fc 01       	movw	r30, r24
    2b28:	ee 5b       	subi	r30, 0xBE	; 190
    2b2a:	fd 4f       	sbci	r31, 0xFD	; 253
    2b2c:	80 81       	ld	r24, Z
    2b2e:	91 81       	ldd	r25, Z+1	; 0x01
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	59 f0       	breq	.+22     	; 0x2b4a <notify+0x48>
		{
			arr[i]();
    2b34:	89 81       	ldd	r24, Y+1	; 0x01
    2b36:	9a 81       	ldd	r25, Y+2	; 0x02
    2b38:	88 0f       	add	r24, r24
    2b3a:	99 1f       	adc	r25, r25
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	ee 5b       	subi	r30, 0xBE	; 190
    2b40:	fd 4f       	sbci	r31, 0xFD	; 253
    2b42:	01 90       	ld	r0, Z+
    2b44:	f0 81       	ld	r31, Z
    2b46:	e0 2d       	mov	r30, r0
    2b48:	09 95       	icall
{

	if(flag==1)
	{
	flag = 0;
	for (int i=0 ; i<MAX_SUB;i++)
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b4e:	01 96       	adiw	r24, 0x01	; 1
    2b50:	9a 83       	std	Y+2, r25	; 0x02
    2b52:	89 83       	std	Y+1, r24	; 0x01
    2b54:	89 81       	ldd	r24, Y+1	; 0x01
    2b56:	9a 81       	ldd	r25, Y+2	; 0x02
    2b58:	8a 30       	cpi	r24, 0x0A	; 10
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	04 f3       	brlt	.-64     	; 0x2b1e <notify+0x1c>
	}
	}
	else
	{}

	}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <__vector_1>:


ISR(INT0_vect)
{
    2b68:	1f 92       	push	r1
    2b6a:	0f 92       	push	r0
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	0f 92       	push	r0
    2b70:	11 24       	eor	r1, r1
    2b72:	8f 93       	push	r24
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	cd b7       	in	r28, 0x3d	; 61
    2b7a:	de b7       	in	r29, 0x3e	; 62
	flag=1;
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	80 93 56 02 	sts	0x0256, r24
}
    2b82:	cf 91       	pop	r28
    2b84:	df 91       	pop	r29
    2b86:	8f 91       	pop	r24
    2b88:	0f 90       	pop	r0
    2b8a:	0f be       	out	0x3f, r0	; 63
    2b8c:	0f 90       	pop	r0
    2b8e:	1f 90       	pop	r1
    2b90:	18 95       	reti

00002b92 <app_init>:
#include "app.h"


void app_init(void){
    2b92:	df 93       	push	r29
    2b94:	cf 93       	push	r28
    2b96:	cd b7       	in	r28, 0x3d	; 61
    2b98:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    2b9a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_init>
	DcMotor_Init();
    2b9e:	0e 94 22 13 	call	0x2644	; 0x2644 <DcMotor_Init>
	button_init(PWM_BUTTON_PORT, PWM_BUTTON_PIN, PULL_UP);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	41 e0       	ldi	r20, 0x01	; 1
    2ba8:	0e 94 57 13 	call	0x26ae	; 0x26ae <button_init>

}
    2bac:	cf 91       	pop	r28
    2bae:	df 91       	pop	r29
    2bb0:	08 95       	ret

00002bb2 <app_start>:




void app_start(void){
    2bb2:	df 93       	push	r29
    2bb4:	cf 93       	push	r28
    2bb6:	00 d0       	rcall	.+0      	; 0x2bb8 <app_start+0x6>
    2bb8:	cd b7       	in	r28, 0x3d	; 61
    2bba:	de b7       	in	r29, 0x3e	; 62
	uint8 pressed_flag=0;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
	uint8 press_num=0;
    2bbe:	1a 82       	std	Y+2, r1	; 0x02

	LCD_displayStringRowColumn((uint8)0,(uint8)2,"FAN IS ");
    2bc0:	23 e6       	ldi	r18, 0x63	; 99
    2bc2:	30 e0       	ldi	r19, 0x00	; 0
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	62 e0       	ldi	r22, 0x02	; 2
    2bc8:	a9 01       	movw	r20, r18
    2bca:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>

	while(1){

		read_press(& pressed_flag,&press_num);
    2bce:	9e 01       	movw	r18, r28
    2bd0:	2e 5f       	subi	r18, 0xFE	; 254
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	ce 01       	movw	r24, r28
    2bd6:	01 96       	adiw	r24, 0x01	; 1
    2bd8:	b9 01       	movw	r22, r18
    2bda:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <read_press>
		rotate_press(&press_num);
    2bde:	ce 01       	movw	r24, r28
    2be0:	02 96       	adiw	r24, 0x02	; 2
    2be2:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <rotate_press>
    2be6:	f3 cf       	rjmp	.-26     	; 0x2bce <app_start+0x1c>

00002be8 <read_press>:
	}

}


void read_press(uint8* pressed_flag_ptr,uint8* press_num_ptr){
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
    2bf0:	63 97       	sbiw	r28, 0x13	; 19
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	99 8b       	std	Y+17, r25	; 0x11
    2bfe:	88 8b       	std	Y+16, r24	; 0x10
    2c00:	7b 8b       	std	Y+19, r23	; 0x13
    2c02:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 button_value = 1;
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	8f 87       	std	Y+15, r24	; 0x0f
	button_value = read_button(PWM_BUTTON_PORT, PWM_BUTTON_PIN);
    2c08:	80 e0       	ldi	r24, 0x00	; 0
    2c0a:	60 e0       	ldi	r22, 0x00	; 0
    2c0c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <read_button>
    2c10:	8f 87       	std	Y+15, r24	; 0x0f

		if((button_value == LOGIC_LOW)  && (*pressed_flag_ptr == LOGIC_LOW)){
    2c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c14:	88 23       	and	r24, r24
    2c16:	09 f0       	breq	.+2      	; 0x2c1a <read_press+0x32>
    2c18:	90 c0       	rjmp	.+288    	; 0x2d3a <read_press+0x152>
    2c1a:	e8 89       	ldd	r30, Y+16	; 0x10
    2c1c:	f9 89       	ldd	r31, Y+17	; 0x11
    2c1e:	80 81       	ld	r24, Z
    2c20:	88 23       	and	r24, r24
    2c22:	09 f0       	breq	.+2      	; 0x2c26 <read_press+0x3e>
    2c24:	8a c0       	rjmp	.+276    	; 0x2d3a <read_press+0x152>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a8 e4       	ldi	r26, 0x48	; 72
    2c2c:	b2 e4       	ldi	r27, 0x42	; 66
    2c2e:	8b 87       	std	Y+11, r24	; 0x0b
    2c30:	9c 87       	std	Y+12, r25	; 0x0c
    2c32:	ad 87       	std	Y+13, r26	; 0x0d
    2c34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a e7       	ldi	r20, 0x7A	; 122
    2c44:	53 e4       	ldi	r21, 0x43	; 67
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8f 83       	std	Y+7, r24	; 0x07
    2c50:	98 87       	std	Y+8, r25	; 0x08
    2c52:	a9 87       	std	Y+9, r26	; 0x09
    2c54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c56:	6f 81       	ldd	r22, Y+7	; 0x07
    2c58:	78 85       	ldd	r23, Y+8	; 0x08
    2c5a:	89 85       	ldd	r24, Y+9	; 0x09
    2c5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <read_press+0x90>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9e 83       	std	Y+6, r25	; 0x06
    2c74:	8d 83       	std	Y+5, r24	; 0x05
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <read_press+0x10e>
	else if (__tmp > 65535)
    2c78:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7a:	78 85       	ldd	r23, Y+8	; 0x08
    2c7c:	89 85       	ldd	r24, Y+9	; 0x09
    2c7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	4c f5       	brge	.+82     	; 0x2ce2 <read_press+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9e 83       	std	Y+6, r25	; 0x06
    2cb6:	8d 83       	std	Y+5, r24	; 0x05
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <read_press+0xf0>
    2cba:	89 e1       	ldi	r24, 0x19	; 25
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	9c 83       	std	Y+4, r25	; 0x04
    2cc0:	8b 83       	std	Y+3, r24	; 0x03
    2cc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <read_press+0xde>
    2cca:	9c 83       	std	Y+4, r25	; 0x04
    2ccc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cce:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9e 83       	std	Y+6, r25	; 0x06
    2cd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cda:	9e 81       	ldd	r25, Y+6	; 0x06
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	69 f7       	brne	.-38     	; 0x2cba <read_press+0xd2>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <read_press+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ce4:	78 85       	ldd	r23, Y+8	; 0x08
    2ce6:	89 85       	ldd	r24, Y+9	; 0x09
    2ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
    2cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cfa:	9a 83       	std	Y+2, r25	; 0x02
    2cfc:	89 83       	std	Y+1, r24	; 0x01
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	9a 81       	ldd	r25, Y+2	; 0x02
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <read_press+0x11a>
    2d06:	9a 83       	std	Y+2, r25	; 0x02
    2d08:	89 83       	std	Y+1, r24	; 0x01

			_delay_ms((double)50);

			button_value = read_button(PWM_BUTTON_PORT, PWM_BUTTON_PIN);
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	0e 94 79 13 	call	0x26f2	; 0x26f2 <read_button>
    2d12:	8f 87       	std	Y+15, r24	; 0x0f

			if((button_value == LOGIC_LOW)  && (*pressed_flag_ptr == LOGIC_LOW)){
    2d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d16:	88 23       	and	r24, r24
    2d18:	81 f4       	brne	.+32     	; 0x2d3a <read_press+0x152>
    2d1a:	e8 89       	ldd	r30, Y+16	; 0x10
    2d1c:	f9 89       	ldd	r31, Y+17	; 0x11
    2d1e:	80 81       	ld	r24, Z
    2d20:	88 23       	and	r24, r24
    2d22:	59 f4       	brne	.+22     	; 0x2d3a <read_press+0x152>

				*pressed_flag_ptr = LOGIC_HIGH;
    2d24:	e8 89       	ldd	r30, Y+16	; 0x10
    2d26:	f9 89       	ldd	r31, Y+17	; 0x11
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	80 83       	st	Z, r24

				(*press_num_ptr)++;
    2d2c:	ea 89       	ldd	r30, Y+18	; 0x12
    2d2e:	fb 89       	ldd	r31, Y+19	; 0x13
    2d30:	80 81       	ld	r24, Z
    2d32:	8f 5f       	subi	r24, 0xFF	; 255
    2d34:	ea 89       	ldd	r30, Y+18	; 0x12
    2d36:	fb 89       	ldd	r31, Y+19	; 0x13
    2d38:	80 83       	st	Z, r24

			}
		}
		if((button_value == LOGIC_HIGH)){
    2d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d3c:	81 30       	cpi	r24, 0x01	; 1
    2d3e:	19 f4       	brne	.+6      	; 0x2d46 <read_press+0x15e>
			*pressed_flag_ptr = LOGIC_LOW;
    2d40:	e8 89       	ldd	r30, Y+16	; 0x10
    2d42:	f9 89       	ldd	r31, Y+17	; 0x11
    2d44:	10 82       	st	Z, r1
		}


}
    2d46:	63 96       	adiw	r28, 0x13	; 19
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	cf 91       	pop	r28
    2d54:	df 91       	pop	r29
    2d56:	08 95       	ret

00002d58 <rotate_press>:

void rotate_press(uint8* press_num_ptr){
    2d58:	df 93       	push	r29
    2d5a:	cf 93       	push	r28
    2d5c:	00 d0       	rcall	.+0      	; 0x2d5e <rotate_press+0x6>
    2d5e:	0f 92       	push	r0
    2d60:	cd b7       	in	r28, 0x3d	; 61
    2d62:	de b7       	in	r29, 0x3e	; 62
    2d64:	9b 83       	std	Y+3, r25	; 0x03
    2d66:	8a 83       	std	Y+2, r24	; 0x02
	if(((*press_num_ptr)<=(uint8)0) || ((*press_num_ptr)>(uint8)10)){
    2d68:	ea 81       	ldd	r30, Y+2	; 0x02
    2d6a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d6c:	80 81       	ld	r24, Z
    2d6e:	88 23       	and	r24, r24
    2d70:	29 f0       	breq	.+10     	; 0x2d7c <rotate_press+0x24>
    2d72:	ea 81       	ldd	r30, Y+2	; 0x02
    2d74:	fb 81       	ldd	r31, Y+3	; 0x03
    2d76:	80 81       	ld	r24, Z
    2d78:	8b 30       	cpi	r24, 0x0B	; 11
    2d7a:	18 f0       	brcs	.+6      	; 0x2d82 <rotate_press+0x2a>

		(*press_num_ptr) = (uint8)0;
    2d7c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d7e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d80:	10 82       	st	Z, r1
	}

	if ((*press_num_ptr) == (uint8)0) {
    2d82:	ea 81       	ldd	r30, Y+2	; 0x02
    2d84:	fb 81       	ldd	r31, Y+3	; 0x03
    2d86:	80 81       	ld	r24, Z
    2d88:	88 23       	and	r24, r24
    2d8a:	61 f4       	brne	.+24     	; 0x2da4 <rotate_press+0x4c>
			LCD_displayStringRowColumn((uint8)0,(uint8)9,"OFF   ");
    2d8c:	2b e6       	ldi	r18, 0x6B	; 107
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	69 e0       	ldi	r22, 0x09	; 9
    2d94:	a9 01       	movw	r20, r18
    2d96:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>
			DcMotor_Rotate(stop,(uint8)0);
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	60 e0       	ldi	r22, 0x00	; 0
    2d9e:	0e 94 38 13 	call	0x2670	; 0x2670 <DcMotor_Rotate>
    2da2:	24 c0       	rjmp	.+72     	; 0x2dec <rotate_press+0x94>
	}
	else{
		uint8 temp=(*press_num_ptr)*(uint8)10;
    2da4:	ea 81       	ldd	r30, Y+2	; 0x02
    2da6:	fb 81       	ldd	r31, Y+3	; 0x03
    2da8:	80 81       	ld	r24, Z
    2daa:	88 2f       	mov	r24, r24
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	9c 01       	movw	r18, r24
    2db0:	22 0f       	add	r18, r18
    2db2:	33 1f       	adc	r19, r19
    2db4:	c9 01       	movw	r24, r18
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	82 0f       	add	r24, r18
    2dc0:	93 1f       	adc	r25, r19
    2dc2:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor((uint8)0,(uint8)9);
    2dc4:	80 e0       	ldi	r24, 0x00	; 0
    2dc6:	69 e0       	ldi	r22, 0x09	; 9
    2dc8:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_moveCursor>
		LCD_intgerToString((sint32)temp);
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	88 2f       	mov	r24, r24
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	a0 e0       	ldi	r26, 0x00	; 0
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	bc 01       	movw	r22, r24
    2dd8:	cd 01       	movw	r24, r26
    2dda:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_intgerToString>
		LCD_displayCharacter('%');
    2dde:	85 e2       	ldi	r24, 0x25	; 37
    2de0:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LCD_displayCharacter>
		DcMotor_Rotate(clockwise,temp);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	69 81       	ldd	r22, Y+1	; 0x01
    2de8:	0e 94 38 13 	call	0x2670	; 0x2670 <DcMotor_Rotate>
	}
}
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	cf 91       	pop	r28
    2df4:	df 91       	pop	r29
    2df6:	08 95       	ret

00002df8 <task3>:

/*-----------------------------------------------------------------------------------------*/
void task3(void)
{
    2df8:	df 93       	push	r29
    2dfa:	cf 93       	push	r28
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	a6 97       	sbiw	r28, 0x26	; 38
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    uint8 data[NUM_CHANNEL_ID]={0};
    2e0c:	1f 86       	std	Y+15, r1	; 0x0f
    2e0e:	18 8a       	std	Y+16, r1	; 0x10
    2e10:	19 8a       	std	Y+17, r1	; 0x11
    2e12:	1a 8a       	std	Y+18, r1	; 0x12
    GPIO_Init(GPIO_ConfigPin);
    2e14:	81 e9       	ldi	r24, 0x91	; 145
    2e16:	91 e0       	ldi	r25, 0x01	; 1
    2e18:	0e 94 26 08 	call	0x104c	; 0x104c <GPIO_Init>
    ChannelGroupType ChannelID ={NUM_CHANNEL_ID,{0,4,6,10}};
    2e1c:	ce 01       	movw	r24, r28
    2e1e:	43 96       	adiw	r24, 0x13	; 19
    2e20:	9e 8f       	std	Y+30, r25	; 0x1e
    2e22:	8d 8f       	std	Y+29, r24	; 0x1d
    2e24:	e6 e3       	ldi	r30, 0x36	; 54
    2e26:	f2 e0       	ldi	r31, 0x02	; 2
    2e28:	f8 a3       	std	Y+32, r31	; 0x20
    2e2a:	ef 8f       	std	Y+31, r30	; 0x1f
    2e2c:	f5 e0       	ldi	r31, 0x05	; 5
    2e2e:	f9 a3       	std	Y+33, r31	; 0x21
    2e30:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e32:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e34:	00 80       	ld	r0, Z
    2e36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e38:	98 a1       	ldd	r25, Y+32	; 0x20
    2e3a:	01 96       	adiw	r24, 0x01	; 1
    2e3c:	98 a3       	std	Y+32, r25	; 0x20
    2e3e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e40:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2e42:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2e44:	00 82       	st	Z, r0
    2e46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e4a:	01 96       	adiw	r24, 0x01	; 1
    2e4c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e4e:	8d 8f       	std	Y+29, r24	; 0x1d
    2e50:	99 a1       	ldd	r25, Y+33	; 0x21
    2e52:	91 50       	subi	r25, 0x01	; 1
    2e54:	99 a3       	std	Y+33, r25	; 0x21
    2e56:	e9 a1       	ldd	r30, Y+33	; 0x21
    2e58:	ee 23       	and	r30, r30
    2e5a:	51 f7       	brne	.-44     	; 0x2e30 <task3+0x38>
    ChannelGroupType ChannelID1 ={NUM_CHANNEL_ID,{16,18,23,26}};
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	48 96       	adiw	r24, 0x18	; 24
    2e60:	9b a3       	std	Y+35, r25	; 0x23
    2e62:	8a a3       	std	Y+34, r24	; 0x22
    2e64:	e1 e3       	ldi	r30, 0x31	; 49
    2e66:	f2 e0       	ldi	r31, 0x02	; 2
    2e68:	fd a3       	std	Y+37, r31	; 0x25
    2e6a:	ec a3       	std	Y+36, r30	; 0x24
    2e6c:	f5 e0       	ldi	r31, 0x05	; 5
    2e6e:	fe a3       	std	Y+38, r31	; 0x26
    2e70:	ec a1       	ldd	r30, Y+36	; 0x24
    2e72:	fd a1       	ldd	r31, Y+37	; 0x25
    2e74:	00 80       	ld	r0, Z
    2e76:	8c a1       	ldd	r24, Y+36	; 0x24
    2e78:	9d a1       	ldd	r25, Y+37	; 0x25
    2e7a:	01 96       	adiw	r24, 0x01	; 1
    2e7c:	9d a3       	std	Y+37, r25	; 0x25
    2e7e:	8c a3       	std	Y+36, r24	; 0x24
    2e80:	ea a1       	ldd	r30, Y+34	; 0x22
    2e82:	fb a1       	ldd	r31, Y+35	; 0x23
    2e84:	00 82       	st	Z, r0
    2e86:	8a a1       	ldd	r24, Y+34	; 0x22
    2e88:	9b a1       	ldd	r25, Y+35	; 0x23
    2e8a:	01 96       	adiw	r24, 0x01	; 1
    2e8c:	9b a3       	std	Y+35, r25	; 0x23
    2e8e:	8a a3       	std	Y+34, r24	; 0x22
    2e90:	9e a1       	ldd	r25, Y+38	; 0x26
    2e92:	91 50       	subi	r25, 0x01	; 1
    2e94:	9e a3       	std	Y+38, r25	; 0x26
    2e96:	ee a1       	ldd	r30, Y+38	; 0x26
    2e98:	ee 23       	and	r30, r30
    2e9a:	51 f7       	brne	.-44     	; 0x2e70 <task3+0x78>
	while(1)
	{

	GPIO_ChannelGroupRead(&ChannelID1, data);
    2e9c:	ce 01       	movw	r24, r28
    2e9e:	48 96       	adiw	r24, 0x18	; 24
    2ea0:	9e 01       	movw	r18, r28
    2ea2:	21 5f       	subi	r18, 0xF1	; 241
    2ea4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea6:	b9 01       	movw	r22, r18
    2ea8:	0e 94 67 09 	call	0x12ce	; 0x12ce <GPIO_ChannelGroupRead>
	GPIO_ChannelGroupWrite(&ChannelID, data);
    2eac:	ce 01       	movw	r24, r28
    2eae:	43 96       	adiw	r24, 0x13	; 19
    2eb0:	9e 01       	movw	r18, r28
    2eb2:	21 5f       	subi	r18, 0xF1	; 241
    2eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb6:	b9 01       	movw	r22, r18
    2eb8:	0e 94 04 09 	call	0x1208	; 0x1208 <GPIO_ChannelGroupWrite>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a8 e4       	ldi	r26, 0x48	; 72
    2ec2:	b2 e4       	ldi	r27, 0x42	; 66
    2ec4:	8b 87       	std	Y+11, r24	; 0x0b
    2ec6:	9c 87       	std	Y+12, r25	; 0x0c
    2ec8:	ad 87       	std	Y+13, r26	; 0x0d
    2eca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	4a e7       	ldi	r20, 0x7A	; 122
    2eda:	53 e4       	ldi	r21, 0x43	; 67
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	8f 83       	std	Y+7, r24	; 0x07
    2ee6:	98 87       	std	Y+8, r25	; 0x08
    2ee8:	a9 87       	std	Y+9, r26	; 0x09
    2eea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eec:	6f 81       	ldd	r22, Y+7	; 0x07
    2eee:	78 85       	ldd	r23, Y+8	; 0x08
    2ef0:	89 85       	ldd	r24, Y+9	; 0x09
    2ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	2c f4       	brge	.+10     	; 0x2f0e <task3+0x116>
		__ticks = 1;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	9e 83       	std	Y+6, r25	; 0x06
    2f0a:	8d 83       	std	Y+5, r24	; 0x05
    2f0c:	3f c0       	rjmp	.+126    	; 0x2f8c <task3+0x194>
	else if (__tmp > 65535)
    2f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f10:	78 85       	ldd	r23, Y+8	; 0x08
    2f12:	89 85       	ldd	r24, Y+9	; 0x09
    2f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f16:	20 e0       	ldi	r18, 0x00	; 0
    2f18:	3f ef       	ldi	r19, 0xFF	; 255
    2f1a:	4f e7       	ldi	r20, 0x7F	; 127
    2f1c:	57 e4       	ldi	r21, 0x47	; 71
    2f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f22:	18 16       	cp	r1, r24
    2f24:	4c f5       	brge	.+82     	; 0x2f78 <task3+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	40 e2       	ldi	r20, 0x20	; 32
    2f34:	51 e4       	ldi	r21, 0x41	; 65
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	bc 01       	movw	r22, r24
    2f40:	cd 01       	movw	r24, r26
    2f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f46:	dc 01       	movw	r26, r24
    2f48:	cb 01       	movw	r24, r22
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
    2f4e:	0f c0       	rjmp	.+30     	; 0x2f6e <task3+0x176>
    2f50:	89 e1       	ldi	r24, 0x19	; 25
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	9c 83       	std	Y+4, r25	; 0x04
    2f56:	8b 83       	std	Y+3, r24	; 0x03
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	f1 f7       	brne	.-4      	; 0x2f5c <task3+0x164>
    2f60:	9c 83       	std	Y+4, r25	; 0x04
    2f62:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f64:	8d 81       	ldd	r24, Y+5	; 0x05
    2f66:	9e 81       	ldd	r25, Y+6	; 0x06
    2f68:	01 97       	sbiw	r24, 0x01	; 1
    2f6a:	9e 83       	std	Y+6, r25	; 0x06
    2f6c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f70:	9e 81       	ldd	r25, Y+6	; 0x06
    2f72:	00 97       	sbiw	r24, 0x00	; 0
    2f74:	69 f7       	brne	.-38     	; 0x2f50 <task3+0x158>
    2f76:	92 cf       	rjmp	.-220    	; 0x2e9c <task3+0xa4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	9e 83       	std	Y+6, r25	; 0x06
    2f8a:	8d 83       	std	Y+5, r24	; 0x05
    2f8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	01 97       	sbiw	r24, 0x01	; 1
    2f9a:	f1 f7       	brne	.-4      	; 0x2f98 <task3+0x1a0>
    2f9c:	9a 83       	std	Y+2, r25	; 0x02
    2f9e:	89 83       	std	Y+1, r24	; 0x01
    2fa0:	7d cf       	rjmp	.-262    	; 0x2e9c <task3+0xa4>

00002fa2 <task4>:
	}
}

/*-----------------------------------------------------------------------------------------*/

void task4(void){
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	00 d0       	rcall	.+0      	; 0x2fa8 <task4+0x6>
    2fa8:	00 d0       	rcall	.+0      	; 0x2faa <task4+0x8>
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
	SREG  |= (1<<7);
    2fae:	af e5       	ldi	r26, 0x5F	; 95
    2fb0:	b0 e0       	ldi	r27, 0x00	; 0
    2fb2:	ef e5       	ldi	r30, 0x5F	; 95
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	80 81       	ld	r24, Z
    2fb8:	80 68       	ori	r24, 0x80	; 128
    2fba:	8c 93       	st	X, r24
	LCD_init();
    2fbc:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_init>
	LCD_displayStringRowColumn((uint8)0,(uint8)0,"TEMP IS: ");
    2fc0:	22 e7       	ldi	r18, 0x72	; 114
    2fc2:	30 e0       	ldi	r19, 0x00	; 0
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	60 e0       	ldi	r22, 0x00	; 0
    2fc8:	a9 01       	movw	r20, r18
    2fca:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn((uint8)1,(uint8)0,"PWM IS: ");
    2fce:	2c e7       	ldi	r18, 0x7C	; 124
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	a9 01       	movw	r20, r18
    2fd8:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>
	/*use user custom data type to set it with configuration for Timer 0*/
	Timer0_ConfigType timer0_config_var ={COMPARE_MODE,F_CPU_1024,0,98};
    2fdc:	82 e0       	ldi	r24, 0x02	; 2
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	85 e0       	ldi	r24, 0x05	; 5
    2fe2:	8a 83       	std	Y+2, r24	; 0x02
    2fe4:	1b 82       	std	Y+3, r1	; 0x03
    2fe6:	82 e6       	ldi	r24, 0x62	; 98
    2fe8:	8c 83       	std	Y+4, r24	; 0x04
	/*init timer */
	Timer0_init(&timer0_config_var);
    2fea:	ce 01       	movw	r24, r28
    2fec:	01 96       	adiw	r24, 0x01	; 1
    2fee:	0e 94 b6 06 	call	0xd6c	; 0xd6c <Timer0_init>
	SetPollingTime(500);
    2ff2:	84 ef       	ldi	r24, 0xF4	; 244
    2ff4:	91 e0       	ldi	r25, 0x01	; 1
    2ff6:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <SetPollingTime>
	StartPolling();
    2ffa:	0e 94 bb 14 	call	0x2976	; 0x2976 <StartPolling>
	Timer0_setCallBack(Poll);
    2ffe:	88 e8       	ldi	r24, 0x88	; 136
    3000:	94 e1       	ldi	r25, 0x14	; 20
    3002:	0e 94 14 07 	call	0xe28	; 0xe28 <Timer0_setCallBack>
	DcMotor_Init();
    3006:	0e 94 22 13 	call	0x2644	; 0x2644 <DcMotor_Init>
	SPI_initMaster();
    300a:	0e 94 41 07 	call	0xe82	; 0xe82 <SPI_initMaster>
	TC72_Init(CONTINUOUS_MODE);
    300e:	84 e0       	ldi	r24, 0x04	; 4
    3010:	0e 94 8e 13 	call	0x271c	; 0x271c <TC72_Init>
    3014:	ff cf       	rjmp	.-2      	; 0x3014 <task4+0x72>

00003016 <observer_task>:

/*-----------------------------------------------------------------------------------------*/


void observer_task(void)
{
    3016:	df 93       	push	r29
    3018:	cf 93       	push	r28
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
	GLOBAL_INTERRUPT_ENABLE();
    301e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <GLOBAL_INTERRUPT_ENABLE>
	INT0_init(RISING_EDGE_TRIGGER,PIN_INPUT);
    3022:	83 e0       	ldi	r24, 0x03	; 3
    3024:	60 e0       	ldi	r22, 0x00	; 0
    3026:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <INT0_init>

	GPIO_setupPinDirection(PORTC_ID, PIN1_ID, PIN_OUTPUT);
    302a:	82 e0       	ldi	r24, 0x02	; 2
    302c:	61 e0       	ldi	r22, 0x01	; 1
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_OUTPUT);
    3034:	82 e0       	ldi	r24, 0x02	; 2
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	41 e0       	ldi	r20, 0x01	; 1
    303a:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPinDirection>


	subscribe(accept_client_1);
    303e:	8b ee       	ldi	r24, 0xEB	; 235
    3040:	94 e1       	ldi	r25, 0x14	; 20
    3042:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <subscribe>
	subscribe(accept_client_2);
    3046:	83 e0       	ldi	r24, 0x03	; 3
    3048:	95 e1       	ldi	r25, 0x15	; 21
    304a:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <subscribe>
	unsubscribe(accept_client_1);
    304e:	8b ee       	ldi	r24, 0xEB	; 235
    3050:	94 e1       	ldi	r25, 0x14	; 20
    3052:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <unsubscribe>

	while(1)
	{
		notify();
    3056:	0e 94 81 15 	call	0x2b02	; 0x2b02 <notify>
    305a:	fd cf       	rjmp	.-6      	; 0x3056 <observer_task+0x40>

0000305c <main>:

#include "APP/app.h"

int main(int argc, char **argv);

int main(int argc, char **argv) {
    305c:	df 93       	push	r29
    305e:	cf 93       	push	r28
    3060:	00 d0       	rcall	.+0      	; 0x3062 <main+0x6>
    3062:	00 d0       	rcall	.+0      	; 0x3064 <main+0x8>
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	9a 83       	std	Y+2, r25	; 0x02
    306a:	89 83       	std	Y+1, r24	; 0x01
    306c:	7c 83       	std	Y+4, r23	; 0x04
    306e:	6b 83       	std	Y+3, r22	; 0x03

//app_init();
//app_start();

observer_task();
    3070:	0e 94 0b 18 	call	0x3016	; 0x3016 <observer_task>


return 0;
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
}
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	0f 90       	pop	r0
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <__divmodhi4>:
    3086:	97 fb       	bst	r25, 7
    3088:	09 2e       	mov	r0, r25
    308a:	07 26       	eor	r0, r23
    308c:	0a d0       	rcall	.+20     	; 0x30a2 <__divmodhi4_neg1>
    308e:	77 fd       	sbrc	r23, 7
    3090:	04 d0       	rcall	.+8      	; 0x309a <__divmodhi4_neg2>
    3092:	0c d0       	rcall	.+24     	; 0x30ac <__udivmodhi4>
    3094:	06 d0       	rcall	.+12     	; 0x30a2 <__divmodhi4_neg1>
    3096:	00 20       	and	r0, r0
    3098:	1a f4       	brpl	.+6      	; 0x30a0 <__divmodhi4_exit>

0000309a <__divmodhi4_neg2>:
    309a:	70 95       	com	r23
    309c:	61 95       	neg	r22
    309e:	7f 4f       	sbci	r23, 0xFF	; 255

000030a0 <__divmodhi4_exit>:
    30a0:	08 95       	ret

000030a2 <__divmodhi4_neg1>:
    30a2:	f6 f7       	brtc	.-4      	; 0x30a0 <__divmodhi4_exit>
    30a4:	90 95       	com	r25
    30a6:	81 95       	neg	r24
    30a8:	9f 4f       	sbci	r25, 0xFF	; 255
    30aa:	08 95       	ret

000030ac <__udivmodhi4>:
    30ac:	aa 1b       	sub	r26, r26
    30ae:	bb 1b       	sub	r27, r27
    30b0:	51 e1       	ldi	r21, 0x11	; 17
    30b2:	07 c0       	rjmp	.+14     	; 0x30c2 <__udivmodhi4_ep>

000030b4 <__udivmodhi4_loop>:
    30b4:	aa 1f       	adc	r26, r26
    30b6:	bb 1f       	adc	r27, r27
    30b8:	a6 17       	cp	r26, r22
    30ba:	b7 07       	cpc	r27, r23
    30bc:	10 f0       	brcs	.+4      	; 0x30c2 <__udivmodhi4_ep>
    30be:	a6 1b       	sub	r26, r22
    30c0:	b7 0b       	sbc	r27, r23

000030c2 <__udivmodhi4_ep>:
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	5a 95       	dec	r21
    30c8:	a9 f7       	brne	.-22     	; 0x30b4 <__udivmodhi4_loop>
    30ca:	80 95       	com	r24
    30cc:	90 95       	com	r25
    30ce:	bc 01       	movw	r22, r24
    30d0:	cd 01       	movw	r24, r26
    30d2:	08 95       	ret

000030d4 <__prologue_saves__>:
    30d4:	2f 92       	push	r2
    30d6:	3f 92       	push	r3
    30d8:	4f 92       	push	r4
    30da:	5f 92       	push	r5
    30dc:	6f 92       	push	r6
    30de:	7f 92       	push	r7
    30e0:	8f 92       	push	r8
    30e2:	9f 92       	push	r9
    30e4:	af 92       	push	r10
    30e6:	bf 92       	push	r11
    30e8:	cf 92       	push	r12
    30ea:	df 92       	push	r13
    30ec:	ef 92       	push	r14
    30ee:	ff 92       	push	r15
    30f0:	0f 93       	push	r16
    30f2:	1f 93       	push	r17
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	ca 1b       	sub	r28, r26
    30fe:	db 0b       	sbc	r29, r27
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	09 94       	ijmp

0000310c <__epilogue_restores__>:
    310c:	2a 88       	ldd	r2, Y+18	; 0x12
    310e:	39 88       	ldd	r3, Y+17	; 0x11
    3110:	48 88       	ldd	r4, Y+16	; 0x10
    3112:	5f 84       	ldd	r5, Y+15	; 0x0f
    3114:	6e 84       	ldd	r6, Y+14	; 0x0e
    3116:	7d 84       	ldd	r7, Y+13	; 0x0d
    3118:	8c 84       	ldd	r8, Y+12	; 0x0c
    311a:	9b 84       	ldd	r9, Y+11	; 0x0b
    311c:	aa 84       	ldd	r10, Y+10	; 0x0a
    311e:	b9 84       	ldd	r11, Y+9	; 0x09
    3120:	c8 84       	ldd	r12, Y+8	; 0x08
    3122:	df 80       	ldd	r13, Y+7	; 0x07
    3124:	ee 80       	ldd	r14, Y+6	; 0x06
    3126:	fd 80       	ldd	r15, Y+5	; 0x05
    3128:	0c 81       	ldd	r16, Y+4	; 0x04
    312a:	1b 81       	ldd	r17, Y+3	; 0x03
    312c:	aa 81       	ldd	r26, Y+2	; 0x02
    312e:	b9 81       	ldd	r27, Y+1	; 0x01
    3130:	ce 0f       	add	r28, r30
    3132:	d1 1d       	adc	r29, r1
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	ed 01       	movw	r28, r26
    3140:	08 95       	ret

00003142 <itoa>:
    3142:	fb 01       	movw	r30, r22
    3144:	9f 01       	movw	r18, r30
    3146:	e8 94       	clt
    3148:	42 30       	cpi	r20, 0x02	; 2
    314a:	c4 f0       	brlt	.+48     	; 0x317c <itoa+0x3a>
    314c:	45 32       	cpi	r20, 0x25	; 37
    314e:	b4 f4       	brge	.+44     	; 0x317c <itoa+0x3a>
    3150:	4a 30       	cpi	r20, 0x0A	; 10
    3152:	29 f4       	brne	.+10     	; 0x315e <itoa+0x1c>
    3154:	97 fb       	bst	r25, 7
    3156:	1e f4       	brtc	.+6      	; 0x315e <itoa+0x1c>
    3158:	90 95       	com	r25
    315a:	81 95       	neg	r24
    315c:	9f 4f       	sbci	r25, 0xFF	; 255
    315e:	64 2f       	mov	r22, r20
    3160:	77 27       	eor	r23, r23
    3162:	0e 94 56 18 	call	0x30ac	; 0x30ac <__udivmodhi4>
    3166:	80 5d       	subi	r24, 0xD0	; 208
    3168:	8a 33       	cpi	r24, 0x3A	; 58
    316a:	0c f0       	brlt	.+2      	; 0x316e <itoa+0x2c>
    316c:	89 5d       	subi	r24, 0xD9	; 217
    316e:	81 93       	st	Z+, r24
    3170:	cb 01       	movw	r24, r22
    3172:	00 97       	sbiw	r24, 0x00	; 0
    3174:	a1 f7       	brne	.-24     	; 0x315e <itoa+0x1c>
    3176:	16 f4       	brtc	.+4      	; 0x317c <itoa+0x3a>
    3178:	5d e2       	ldi	r21, 0x2D	; 45
    317a:	51 93       	st	Z+, r21
    317c:	10 82       	st	Z, r1
    317e:	c9 01       	movw	r24, r18
    3180:	0c 94 c2 18 	jmp	0x3184	; 0x3184 <strrev>

00003184 <strrev>:
    3184:	dc 01       	movw	r26, r24
    3186:	fc 01       	movw	r30, r24
    3188:	67 2f       	mov	r22, r23
    318a:	71 91       	ld	r23, Z+
    318c:	77 23       	and	r23, r23
    318e:	e1 f7       	brne	.-8      	; 0x3188 <strrev+0x4>
    3190:	32 97       	sbiw	r30, 0x02	; 2
    3192:	04 c0       	rjmp	.+8      	; 0x319c <strrev+0x18>
    3194:	7c 91       	ld	r23, X
    3196:	6d 93       	st	X+, r22
    3198:	70 83       	st	Z, r23
    319a:	62 91       	ld	r22, -Z
    319c:	ae 17       	cp	r26, r30
    319e:	bf 07       	cpc	r27, r31
    31a0:	c8 f3       	brcs	.-14     	; 0x3194 <strrev+0x10>
    31a2:	08 95       	ret

000031a4 <_exit>:
    31a4:	f8 94       	cli

000031a6 <__stop_program>:
    31a6:	ff cf       	rjmp	.-2      	; 0x31a6 <__stop_program>
